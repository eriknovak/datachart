{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> Data visualization package, simple to use, highly customizable </p> <p> </p> <p>Documentation: https://eriknovak.github.io/datachart</p> <p>Source code: https://github.com/eriknovak/datachart</p> <p>The datachart package is a python package for creating data visualizations. It is designed to be simple to use and highly customizable, i.e. it is easy to change the look and feel of the charts.</p>"},{"location":"#requirements","title":"Requirements","text":"<p>Before starting the project make sure these requirements are available:</p> <ul> <li>python. The python programming language (v3.8 or higher).</li> </ul>"},{"location":"#install","title":"Install","text":"<pre><code>pip install datachart\n</code></pre>"},{"location":"#upgrade","title":"Upgrade","text":"<pre><code>pip install datachart --upgrade\n</code></pre>"},{"location":"#examples","title":"Examples","text":"<p>The examples showcases on how to use the <code>datachart</code> package are available on the official How-to Guides.</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>Datachart is developed by the Department for Artificial Intelligence at the Jozef Stefan Institute, and other contributors.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#datachart-063-2024-10-17","title":"datachart-0.6.3 (2024-10-17)","text":"<p>Bug Fixes:</p> <ul> <li>Fix <code>scaley</code> bug in <code>Histogram</code></li> </ul>"},{"location":"changelog/#datachart-062-2024-08-16","title":"datachart-0.6.2 (2024-08-16)","text":"<p>Bug Fixes:</p> <ul> <li>Fix <code>BarChart</code> bar position bug</li> </ul>"},{"location":"changelog/#datachart-061-2024-08-15","title":"datachart-0.6.1 (2024-08-15)","text":"<p>New Features:</p> <ul> <li>Add <code>scale</code> support to <code>LineChart</code>, <code>BarChart</code> and <code>Histogram</code></li> </ul>"},{"location":"changelog/#datachart-060-2024-08-13","title":"datachart-0.6.0 (2024-08-13)","text":"<p>Breaking Changes:</p> <ul> <li>Renaming in the <code>charts</code> module</li> <li>Rename the <code>line_chart</code> to <code>LineChart</code></li> <li>Rename the <code>bar_chart</code> to <code>BarChart</code></li> <li>Rename the <code>histogram</code> to <code>Histogram</code></li> <li>Rename the <code>heatmap</code> to <code>Heatmap</code></li> <li>Renaming the <code>definitions</code> module into <code>typings</code></li> <li>Renaming of <code>style</code> attributes in all modules</li> </ul> <p>New Features:</p> <ul> <li>Complete rework of documentation</li> <li>Update project configuration</li> <li>Update githooks</li> <li>Add favicon</li> </ul> <p>Bug Fixes:</p> <ul> <li>Fix <code>COLORS</code> selection</li> </ul>"},{"location":"changelog/#datachart-050-2023-11-24","title":"datachart-0.5.0 (2023-11-24)","text":"<p>New Features:</p> <ul> <li>Add support for WebP output format</li> <li>Improve code imports</li> <li>Consistent variable naming</li> <li>Add code tests</li> </ul> <p>Bug Fixes:</p> <ul> <li>Use consistent naming convention</li> </ul>"},{"location":"changelog/#datachart-041-2023-11-20","title":"datachart-0.4.1 (2023-11-20)","text":"<p>Bug Fixes:</p> <ul> <li>Fix axis label position</li> </ul>"},{"location":"changelog/#datachart-040-2023-11-20","title":"datachart-0.4.0 (2023-11-20)","text":"<p>New Features:</p> <ul> <li>Add heatmap visualization</li> <li>Add tick placement, label and rotation support</li> </ul> <p>Bug Fixes:</p> <ul> <li>Fix Consistent attribute naming</li> <li>Fix attribute unit tests</li> </ul>"},{"location":"changelog/#datachart-030-2023-11-20","title":"datachart-0.3.0 (2023-11-20)","text":"<p>New Features:</p> <ul> <li>Add vertical and horizontal line support</li> <li>Update documentation</li> </ul>"},{"location":"changelog/#datachart-026-2023-11-20","title":"datachart-0.2.6 (2023-11-20)","text":"<p>New Features:</p> <ul> <li>Increase Python support to 3.8 - 3.12</li> </ul> <p>Bug Fixes:</p> <ul> <li>Fix typing documentation</li> </ul>"},{"location":"changelog/#datachart-025-2023-11-20","title":"datachart-0.2.5 (2023-11-20)","text":"<p>New Features:</p> <ul> <li>Add custom tick placement</li> <li>Add unit tests and CI/CD</li> <li>Add documentation</li> </ul>"},{"location":"changelog/#datachart-010-2023-07-21","title":"datachart-0.1.0 (2023-07-21)","text":"<ul> <li>Initial release</li> </ul> <p>New Features:</p> <ul> <li>Add support for different types of charts: line chart, bar chart, histogram</li> </ul>"},{"location":"development/","title":"Development","text":"<p>This section is for developers only. It describes the requirements, the setup process, how to run tests, and how to deploy.</p>"},{"location":"development/#requirements","title":"Requirements","text":"<p>Before starting the project make sure these requirements are available:</p> <ul> <li> <p>python. The python programming language (v3.8 or higher).</p> </li> <li> <p>git. For versioning your code.</p> </li> </ul>"},{"location":"development/#setup","title":"Setup","text":""},{"location":"development/#create-the-python-environment","title":"Create the python environment","text":"<p>To create a python virtual environment using <code>venv</code>, simply run the following commands:</p> <pre><code># create a new virtual environment\npython -m venv venv\n\n# activate the environment (UNIX)\n. ./venv/bin/activate\n\n# activate the environment (WINDOWS)\n./venv/Scripts/activate\n\n# deactivate the environment (UNIX &amp; WINDOWS)\ndeactivate\n</code></pre>"},{"location":"development/#install","title":"Install","text":"<p>To install the requirements run:</p> <pre><code>pip install -e .[all]\n</code></pre> <p>Githooks. Githooks enable automatic commit and push hooks. The project is configured to run tests on each commit and to run tests and format the code on each push. See the configuration in <code>.githooks.ini</code>. To enable git hooks, run:</p> <pre><code>githooks\n</code></pre>"},{"location":"development/#tests","title":"Tests","text":"<p>To run existing tests, simply run:</p> <pre><code>python -m unittest discover test\n</code></pre> <p>To test notebooks, run:</p> <pre><code>pytest --nbmake ./docs/how-to-guides/**/*ipynb\n</code></pre>"},{"location":"development/#documentation","title":"Documentation","text":"<p>To start live-reloading the documentation, run:</p> <pre><code>mkdocs serve\n</code></pre> <p>When suggesting changes, please refer to the Material for MkDocs documentation.</p>"},{"location":"development/#deployment","title":"Deployment","text":"<p>Once the changes are accepted into the project, the GitHub Actions automatically deploy the documentation to the <code>gh-pages</code> branch.</p>"},{"location":"how-to-guides/","title":"How-to Guides","text":"<p>The how-to guides showcases how to utilize the <code>datachart</code> package to create charts, reflecting the data and the message the user wants to send with it, how to leverage the existing utility module to prepare the data, and how to create a custom theme and configure the package to reflect it.</p> Section Description charts Showcases the creation and customization of charts available in the <code>charts</code> module. utility Showcases the available methods in the <code>utils</code> module. config Showcases the use of the <code>config</code> module to customize the global style. themes Showcases the existing themes already in defined in the <code>themes</code> module. colormaps Showcases the existing colormaps available via the <code>COLORS</code> constant."},{"location":"how-to-guides/colormaps/","title":"Colormaps","text":"<p>This section shows the different colormaps that are available in <code>datachart</code> module. The colormaps are used to customize the colors of the charts.</p> <p>All colormaps are available via the datachart.constants.COLORS constant.</p> In\u00a0[1]: Copied! <pre>from typing import List, Tuple\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n</pre> from typing import List, Tuple  import numpy as np import matplotlib.pyplot as plt In\u00a0[2]: Copied! <pre>from datachart.constants import COLORS\nfrom datachart.utils.colors import get_colormap\n</pre> from datachart.constants import COLORS from datachart.utils.colors import get_colormap In\u00a0[3]: Copied! <pre>def plot_color_gradients(cmap_list: List[Tuple[str, str]], n_sections: int = 256):\n    \"\"\"Plots the gradients of multiple colormaps.\n\n    Args:\n        cmap_list (List[Tuple[str, str]]): The list of colormaps to plot.\n        n_sections (int, optional): The number of sections to plot. Defaults to 256.\n\n    \"\"\"\n\n    gradient = np.linspace(0, 1, n_sections)\n    gradient = np.vstack((gradient, gradient))\n\n    # Create figure and adjust figure height to number of colormaps\n    nrows = len(cmap_list)\n    figh = 0.35 + 0.15 + (nrows + (nrows - 1) * 0.1) * 0.22\n    fig, axs = plt.subplots(nrows=nrows + 1, figsize=(8.2, figh))\n    fig.subplots_adjust(top=1 - 0.35 / figh, bottom=0.15 / figh, left=0.2, right=0.99)\n    axs[0].set_title(f\"datachart colormaps\", fontsize=14)\n\n    for ax, (name, value) in zip(axs, cmap_list):\n        ax.imshow(gradient, aspect=\"auto\", cmap=get_colormap(value))\n        ax.text(\n            -0.01,\n            0.5,\n            name,\n            va=\"center\",\n            ha=\"right\",\n            fontsize=10,\n            transform=ax.transAxes,\n        )\n\n    # Turn off *all* ticks &amp; spines, not just the ones with colormaps.\n    for ax in axs:\n        ax.set_axis_off()\n</pre> def plot_color_gradients(cmap_list: List[Tuple[str, str]], n_sections: int = 256):     \"\"\"Plots the gradients of multiple colormaps.      Args:         cmap_list (List[Tuple[str, str]]): The list of colormaps to plot.         n_sections (int, optional): The number of sections to plot. Defaults to 256.      \"\"\"      gradient = np.linspace(0, 1, n_sections)     gradient = np.vstack((gradient, gradient))      # Create figure and adjust figure height to number of colormaps     nrows = len(cmap_list)     figh = 0.35 + 0.15 + (nrows + (nrows - 1) * 0.1) * 0.22     fig, axs = plt.subplots(nrows=nrows + 1, figsize=(8.2, figh))     fig.subplots_adjust(top=1 - 0.35 / figh, bottom=0.15 / figh, left=0.2, right=0.99)     axs[0].set_title(f\"datachart colormaps\", fontsize=14)      for ax, (name, value) in zip(axs, cmap_list):         ax.imshow(gradient, aspect=\"auto\", cmap=get_colormap(value))         ax.text(             -0.01,             0.5,             name,             va=\"center\",             ha=\"right\",             fontsize=10,             transform=ax.transAxes,         )      # Turn off *all* ticks &amp; spines, not just the ones with colormaps.     for ax in axs:         ax.set_axis_off() In\u00a0[4]: Copied! <pre>cmap_list = [\n    (\"COLORS.Blue\", COLORS.Blue),\n    (\"COLORS.Green\", COLORS.Green),\n    (\"COLORS.Orange\", COLORS.Orange),\n    (\"COLORS.Purple\", COLORS.Purple),\n    (\"COLORS.Grey\", COLORS.Grey),\n    (\"COLORS.YlGnBu\", COLORS.YlGnBu),\n    (\"COLORS.YlGn\", COLORS.YlGn),\n    (\"COLORS.BuGn\", COLORS.BuGn),\n    (\"COLORS.GnBu\", COLORS.GnBu),\n    (\"COLORS.PuBu\", COLORS.PuBu),\n    (\"COLORS.RdBn\", COLORS.RdBn),\n    (\"COLORS.RdYlBu\", COLORS.RdYlBu),\n    (\"COLORS.BrGn\", COLORS.BrGn),\n    (\"COLORS.PuGn\", COLORS.PuGn),\n    (\"COLORS.OrPu\", COLORS.OrPu),\n    (\"COLORS.RdGy\", COLORS.RdGy),\n    (\"COLORS.RdYlGn\", COLORS.RdYlGn),\n    (\"COLORS.Spectral\", COLORS.Spectral),\n    (\"COLORS.MixedLight\", COLORS.MixedLight),\n    (\"COLORS.MixedDark\", COLORS.MixedDark),\n]\n</pre> cmap_list = [     (\"COLORS.Blue\", COLORS.Blue),     (\"COLORS.Green\", COLORS.Green),     (\"COLORS.Orange\", COLORS.Orange),     (\"COLORS.Purple\", COLORS.Purple),     (\"COLORS.Grey\", COLORS.Grey),     (\"COLORS.YlGnBu\", COLORS.YlGnBu),     (\"COLORS.YlGn\", COLORS.YlGn),     (\"COLORS.BuGn\", COLORS.BuGn),     (\"COLORS.GnBu\", COLORS.GnBu),     (\"COLORS.PuBu\", COLORS.PuBu),     (\"COLORS.RdBn\", COLORS.RdBn),     (\"COLORS.RdYlBu\", COLORS.RdYlBu),     (\"COLORS.BrGn\", COLORS.BrGn),     (\"COLORS.PuGn\", COLORS.PuGn),     (\"COLORS.OrPu\", COLORS.OrPu),     (\"COLORS.RdGy\", COLORS.RdGy),     (\"COLORS.RdYlGn\", COLORS.RdYlGn),     (\"COLORS.Spectral\", COLORS.Spectral),     (\"COLORS.MixedLight\", COLORS.MixedLight),     (\"COLORS.MixedDark\", COLORS.MixedDark), ] <p>Continuous scales</p> In\u00a0[5]: Copied! <pre>plot_color_gradients(cmap_list=cmap_list)\n</pre> plot_color_gradients(cmap_list=cmap_list) <p>Discrete scales</p> In\u00a0[6]: Copied! <pre># change the number of sections `n_sections`\nplot_color_gradients(cmap_list=cmap_list, n_sections=10)\n</pre> # change the number of sections `n_sections` plot_color_gradients(cmap_list=cmap_list, n_sections=10)"},{"location":"how-to-guides/colormaps/#colormaps","title":"Colormaps\u00b6","text":""},{"location":"how-to-guides/config/","title":"Config","text":"<p>This section showcases how to use the datachart.config module to customize the global style of the <code>datachart</code> package.</p> <p>Let's start by importing the necessary functions to help us work with the <code>datachart.config</code> module.</p> In\u00a0[1]: Copied! <pre>from datachart.config import config\n</pre> from datachart.config import config <p>The <code>config</code> instance is a global configuration that the users can interact with. It allows them to customize the global style of the <code>datachart</code> package.</p> <p>Furthemore, the instance is of the datachart.config.Config class.</p> <p>Under development</p> <p>         This theme is still under development. If you are interested in improving it, please let us know.     </p>"},{"location":"how-to-guides/config/#config","title":"Config\u00b6","text":""},{"location":"how-to-guides/themes/","title":"Themes","text":"<p>This section showcases the existing themes found in the datachart.themes module.</p> <p>Let's start by importing the necessary functions to help us work with the <code>datachart.themes</code> module.</p> In\u00a0[1]: Copied! <pre>import random\nimport numpy as np\nfrom datachart.charts import LineChart, BarChart, Histogram, Heatmap\nfrom datachart.constants import VALFMT, FIG_SIZE, LINE_MARKER, LINE_STYLE\n</pre> import random import numpy as np from datachart.charts import LineChart, BarChart, Histogram, Heatmap from datachart.constants import VALFMT, FIG_SIZE, LINE_MARKER, LINE_STYLE In\u00a0[2]: Copied! <pre>from datachart.config import config\n</pre> from datachart.config import config <p>To get the supported themes, you have to load them from the <code>datachart.themes</code> module.</p> In\u00a0[3]: Copied! <pre>from datachart.constants import THEME\n</pre> from datachart.constants import THEME <p>The datachart.constants.THEME module contains all the predefined themes.</p> In\u00a0[4]: Copied! <pre># reset the config to the default theme\nconfig.reset_config()\n</pre> # reset the config to the default theme config.reset_config() In\u00a0[5]: Copied! <pre># explicity set the default theme\nconfig.set_theme(THEME.DEFAULT)\n</pre> # explicity set the default theme config.set_theme(THEME.DEFAULT) <p>What follows is a showcase of charts in the default theme.</p> <p>Line Chart</p> In\u00a0[6]: Copied! <pre>_ = LineChart(\n    {\n        \"charts\": [\n            {\n                \"data\": [{\"x\": x / 10, \"y\": np.cos(x / 2)} for x in range(21)],\n                \"style\": {\n                    \"plot_line_marker\": LINE_MARKER.POINT,\n                    \"plot_line_style\": LINE_STYLE.DOTTED,\n                },\n                \"subtitle\": \"cosine\",  # add a subtitle to the line\n            },\n            {\n                \"data\": [{\"x\": x / 10, \"y\": np.sin(x / 2)} for x in range(21)],\n                \"subtitle\": \"sine\",  # add a subtitle to the line\n            },\n        ],\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": \"both\",\n        \"show_legend\": True,  # show the legend\n    }\n)\n</pre> _ = LineChart(     {         \"charts\": [             {                 \"data\": [{\"x\": x / 10, \"y\": np.cos(x / 2)} for x in range(21)],                 \"style\": {                     \"plot_line_marker\": LINE_MARKER.POINT,                     \"plot_line_style\": LINE_STYLE.DOTTED,                 },                 \"subtitle\": \"cosine\",  # add a subtitle to the line             },             {                 \"data\": [{\"x\": x / 10, \"y\": np.sin(x / 2)} for x in range(21)],                 \"subtitle\": \"sine\",  # add a subtitle to the line             },         ],         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": \"both\",         \"show_legend\": True,  # show the legend     } ) <p>Bar Chart</p> In\u00a0[7]: Copied! <pre>_ = BarChart(\n    {\n        \"charts\": {\n            \"data\": [\n                {\"label\": f\"xx{id}\", \"y\": 100 * (id + 1) * random.random()}\n                for id in range(10)\n            ],\n            \"vlines\": [{\"x\": 2 * i} for i in range(1, 4)],\n            \"hlines\": {\"y\": 400},\n        },\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": \"both\",\n        \"xmin\": -0.5,\n        \"xmax\": 9.5,\n    }\n)\n</pre> _ = BarChart(     {         \"charts\": {             \"data\": [                 {\"label\": f\"xx{id}\", \"y\": 100 * (id + 1) * random.random()}                 for id in range(10)             ],             \"vlines\": [{\"x\": 2 * i} for i in range(1, 4)],             \"hlines\": {\"y\": 400},         },         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": \"both\",         \"xmin\": -0.5,         \"xmax\": 9.5,     } ) <p>Histogram</p> In\u00a0[8]: Copied! <pre>_ = Histogram(\n    {\n        \"charts\": [\n            {\n                \"data\": {\"x\": [100 * idx * random.random() for idx in range(100)]},\n                \"subtitle\": f\"Histogram {id}\",\n            }\n            for id in range(2)\n        ],\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,  # must be a tuple (width, height), values are in inches\n        \"show_grid\": \"y\",  # options: \"both\", \"x\", \"y\"\n        \"show_legend\": True,\n        \"num_bins\": 40,\n    }\n)\n</pre> _ = Histogram(     {         \"charts\": [             {                 \"data\": {\"x\": [100 * idx * random.random() for idx in range(100)]},                 \"subtitle\": f\"Histogram {id}\",             }             for id in range(2)         ],         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,  # must be a tuple (width, height), values are in inches         \"show_grid\": \"y\",  # options: \"both\", \"x\", \"y\"         \"show_legend\": True,         \"num_bins\": 40,     } ) <p>Heatmap</p> In\u00a0[9]: Copied! <pre>_ = Heatmap(\n    {\n        \"charts\": {\n            \"data\": [[x + y for x in range(8)] for y in range(8)],\n            \"valfmt\": VALFMT.DECIMAL,\n            \"xticks\": [idx for idx in range(8)],\n            \"xticklabels\": [f\"xxx{idx}\" for idx in range(8)],\n            \"xtickrotate\": 45,\n            \"yticks\": [idx for idx in range(8)],\n            \"yticklabels\": [f\"xxx{idx}\" for idx in range(8)],\n            \"ytickrotate\": 0,\n        },\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.SQUARE_SMALL,\n        \"show_heatmap_values\": True,\n        \"show_colorbars\": True,\n    }\n)\n</pre> _ = Heatmap(     {         \"charts\": {             \"data\": [[x + y for x in range(8)] for y in range(8)],             \"valfmt\": VALFMT.DECIMAL,             \"xticks\": [idx for idx in range(8)],             \"xticklabels\": [f\"xxx{idx}\" for idx in range(8)],             \"xtickrotate\": 45,             \"yticks\": [idx for idx in range(8)],             \"yticklabels\": [f\"xxx{idx}\" for idx in range(8)],             \"ytickrotate\": 0,         },         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.SQUARE_SMALL,         \"show_heatmap_values\": True,         \"show_colorbars\": True,     } ) <p>Under development</p> <p>         This theme is still under development. If you are interested in improving it, please let us know.     </p> <p>The THEME.GREYSCALE is designed to be monochrome and is suitable for printing. It is also used for some journals, which require a monochrome theme.</p> <p>To use the theme, simply run the following code:</p> In\u00a0[10]: Copied! <pre>config.set_theme(THEME.GREYSCALE)\n</pre> config.set_theme(THEME.GREYSCALE) <p>What follows is a showcase of charts in the greyscale theme.</p> <p>Line Chart</p> In\u00a0[11]: Copied! <pre>_ = LineChart(\n    {\n        \"charts\": [\n            {\n                \"data\": [{\"x\": x / 10, \"y\": np.cos(x / 2)} for x in range(21)],\n                \"style\": {\n                    \"plot_line_marker\": LINE_MARKER.POINT,\n                    \"plot_line_style\": LINE_STYLE.DOTTED,\n                },\n                \"subtitle\": \"cosine\",  # add a subtitle to the line\n            },\n            {\n                \"data\": [{\"x\": x / 10, \"y\": np.sin(x / 2)} for x in range(21)],\n                \"subtitle\": \"sine\",  # add a subtitle to the line\n            },\n        ],\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": \"both\",\n        \"show_legend\": True,  # show the legend\n    }\n)\n</pre> _ = LineChart(     {         \"charts\": [             {                 \"data\": [{\"x\": x / 10, \"y\": np.cos(x / 2)} for x in range(21)],                 \"style\": {                     \"plot_line_marker\": LINE_MARKER.POINT,                     \"plot_line_style\": LINE_STYLE.DOTTED,                 },                 \"subtitle\": \"cosine\",  # add a subtitle to the line             },             {                 \"data\": [{\"x\": x / 10, \"y\": np.sin(x / 2)} for x in range(21)],                 \"subtitle\": \"sine\",  # add a subtitle to the line             },         ],         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": \"both\",         \"show_legend\": True,  # show the legend     } ) <p>Bar Chart</p> In\u00a0[12]: Copied! <pre>_ = BarChart(\n    {\n        \"charts\": {\n            \"data\": [\n                {\"label\": f\"xx{id}\", \"y\": 100 * (id + 1) * random.random()}\n                for id in range(10)\n            ],\n            \"vlines\": [{\"x\": 2 * i} for i in range(1, 4)],\n            \"hlines\": {\"y\": 400},\n        },\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": \"both\",\n        \"xmin\": -0.5,\n        \"xmax\": 9.5,\n    }\n)\n</pre> _ = BarChart(     {         \"charts\": {             \"data\": [                 {\"label\": f\"xx{id}\", \"y\": 100 * (id + 1) * random.random()}                 for id in range(10)             ],             \"vlines\": [{\"x\": 2 * i} for i in range(1, 4)],             \"hlines\": {\"y\": 400},         },         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": \"both\",         \"xmin\": -0.5,         \"xmax\": 9.5,     } ) <p>Histogram</p> In\u00a0[13]: Copied! <pre>_ = Histogram(\n    {\n        \"charts\": [\n            {\n                \"data\": {\"x\": [100 * idx * random.random() for idx in range(100)]},\n                \"subtitle\": f\"Histogram {id}\",\n            }\n            for id in range(3)\n        ],\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,  # must be a tuple (width, height), values are in inches\n        \"show_grid\": \"y\",  # options: \"both\", \"x\", \"y\"\n        \"num_bins\": 40,\n    }\n)\n</pre> _ = Histogram(     {         \"charts\": [             {                 \"data\": {\"x\": [100 * idx * random.random() for idx in range(100)]},                 \"subtitle\": f\"Histogram {id}\",             }             for id in range(3)         ],         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,  # must be a tuple (width, height), values are in inches         \"show_grid\": \"y\",  # options: \"both\", \"x\", \"y\"         \"num_bins\": 40,     } ) <p>Heatmap</p> In\u00a0[14]: Copied! <pre>_ = Heatmap(\n    {\n        \"charts\": {\n            \"data\": [[x + y for x in range(8)] for y in range(8)],\n            \"valfmt\": VALFMT.DECIMAL,\n            \"xticks\": [idx for idx in range(8)],\n            \"xticklabels\": [f\"xxx{idx}\" for idx in range(8)],\n            \"xtickrotate\": 45,\n            \"yticks\": [idx for idx in range(8)],\n            \"yticklabels\": [f\"xxx{idx}\" for idx in range(8)],\n            \"ytickrotate\": 0,\n        },\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.SQUARE_SMALL,\n        \"show_heatmap_values\": True,\n        \"show_colorbars\": True,\n    }\n)\n</pre> _ = Heatmap(     {         \"charts\": {             \"data\": [[x + y for x in range(8)] for y in range(8)],             \"valfmt\": VALFMT.DECIMAL,             \"xticks\": [idx for idx in range(8)],             \"xticklabels\": [f\"xxx{idx}\" for idx in range(8)],             \"xtickrotate\": 45,             \"yticks\": [idx for idx in range(8)],             \"yticklabels\": [f\"xxx{idx}\" for idx in range(8)],             \"ytickrotate\": 0,         },         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.SQUARE_SMALL,         \"show_heatmap_values\": True,         \"show_colorbars\": True,     } ) <p>Adding the theme to the <code>datachart</code> package</p> <p>         If you think the theme would be useful and would like it to be added to the <code>datachart</code> package, please create a pull request to add it.     </p> <p>The user can create their own theme by defining a new dictionary that has the same structure as the StyleAttrs type.</p> <p>For instance, one can copy the bellow definition of the default theme and modify the values to customize the theme.</p> In\u00a0[15]: Copied! <pre>from datachart.typings import StyleAttrs\nfrom datachart.constants import COLORS, FONT_STYLE, FONT_WEIGHT, LINE_DRAW_STYLE\n</pre> from datachart.typings import StyleAttrs from datachart.constants import COLORS, FONT_STYLE, FONT_WEIGHT, LINE_DRAW_STYLE In\u00a0[16]: Copied! <pre>CUSTOM_THEME: StyleAttrs = {\n    \"color_general_singular\": COLORS.Blue,\n    \"color_general_multiple\": COLORS.Spectral,\n    \"font_general_family\": \"sans-serif\",\n    \"font_general_sansserif\": [\"Helvetica\", \"Arial\"],\n    \"font_general_color\": \"#000000\",\n    \"font_general_size\": 11,\n    \"font_general_style\": FONT_STYLE.NORMAL,\n    \"font_general_weight\": FONT_WEIGHT.NORMAL,\n    \"font_title_size\": 12,\n    \"font_title_color\": \"#000000\",\n    \"font_title_style\": FONT_STYLE.NORMAL,\n    \"font_title_weight\": FONT_WEIGHT.NORMAL,\n    \"font_subtitle_size\": 11,\n    \"font_subtitle_color\": \"#000000\",\n    \"font_subtitle_style\": FONT_STYLE.NORMAL,\n    \"font_subtitle_weight\": FONT_WEIGHT.NORMAL,\n    \"font_xlabel_size\": 10,\n    \"font_xlabel_color\": \"#000000\",\n    \"font_xlabel_style\": FONT_STYLE.NORMAL,\n    \"font_xlabel_weight\": FONT_WEIGHT.NORMAL,\n    \"font_ylabel_size\": 10,\n    \"font_ylabel_color\": \"#000000\",\n    \"font_ylabel_style\": FONT_STYLE.NORMAL,\n    \"font_ylabel_weight\": FONT_WEIGHT.NORMAL,\n    \"axes_spines_top_visible\": True,\n    \"axes_spines_right_visible\": True,\n    \"axes_spines_bottom_visible\": True,\n    \"axes_spines_left_visible\": True,\n    \"axes_spines_width\": 0.5,\n    \"axes_spines_zorder\": 100,\n    \"axes_ticks_length\": 2,\n    \"axes_ticks_label_size\": 9,\n    \"plot_legend_shadow\": False,\n    \"plot_legend_frameon\": True,\n    \"plot_legend_alignment\": \"left\",\n    \"plot_legend_font_size\": 9,\n    \"plot_legend_title_size\": 10,\n    \"plot_legend_label_color\": \"#000000\",\n    \"plot_area_alpha\": 0.3,\n    \"plot_area_color\": None,\n    \"plot_area_linewidth\": 0,\n    \"plot_area_hatch\": None,\n    \"plot_area_zorder\": 3,\n    \"plot_grid_alpha\": 1,\n    \"plot_grid_color\": \"#E6E6E6\",\n    \"plot_grid_linewidth\": 0.5,\n    \"plot_grid_linestyle\": LINE_STYLE.SOLID,\n    \"plot_grid_zorder\": 0,\n    \"plot_line_color\": None,\n    \"plot_line_style\": LINE_STYLE.SOLID,\n    \"plot_line_marker\": None,\n    \"plot_line_width\": 1,\n    \"plot_line_alpha\": 1.0,\n    \"plot_line_drawstyle\": LINE_DRAW_STYLE.DEFAULT,\n    \"plot_line_zorder\": 3,\n    \"plot_bar_color\": None,\n    \"plot_bar_alpha\": 1.0,\n    \"plot_bar_width\": 0.8,\n    \"plot_bar_zorder\": 3,\n    \"plot_bar_hatch\": None,\n    \"plot_bar_edge_width\": 0.5,\n    \"plot_bar_edge_color\": \"#000000\",\n    \"plot_bar_error_color\": \"#000000\",\n    \"plot_hist_color\": None,\n    \"plot_hist_alpha\": 1.0,\n    \"plot_hist_zorder\": 3,\n    \"plot_hist_fill\": None,\n    \"plot_hist_hatch\": None,\n    \"plot_hist_type\": \"bar\",\n    \"plot_hist_align\": \"mid\",\n    \"plot_hist_edge_width\": 0.5,\n    \"plot_hist_edge_color\": \"#000000\",\n    \"plot_vline_color\": None,\n    \"plot_vline_style\": LINE_STYLE.SOLID,\n    \"plot_vline_width\": 1,\n    \"plot_vline_alpha\": 1.0,\n    \"plot_hline_color\": None,\n    \"plot_hline_style\": LINE_STYLE.SOLID,\n    \"plot_hline_width\": 1,\n    \"plot_hline_alpha\": 1.0,\n    \"plot_heatmap_cmap\": COLORS.Blue,\n    \"plot_heatmap_alpha\": 1.0,\n    \"plot_heatmap_font_size\": 9,\n    \"plot_heatmap_font_color\": \"#000000\",\n    \"plot_heatmap_font_style\": FONT_STYLE.NORMAL,\n    \"plot_heatmap_font_weight\": FONT_WEIGHT.NORMAL,\n}\n</pre> CUSTOM_THEME: StyleAttrs = {     \"color_general_singular\": COLORS.Blue,     \"color_general_multiple\": COLORS.Spectral,     \"font_general_family\": \"sans-serif\",     \"font_general_sansserif\": [\"Helvetica\", \"Arial\"],     \"font_general_color\": \"#000000\",     \"font_general_size\": 11,     \"font_general_style\": FONT_STYLE.NORMAL,     \"font_general_weight\": FONT_WEIGHT.NORMAL,     \"font_title_size\": 12,     \"font_title_color\": \"#000000\",     \"font_title_style\": FONT_STYLE.NORMAL,     \"font_title_weight\": FONT_WEIGHT.NORMAL,     \"font_subtitle_size\": 11,     \"font_subtitle_color\": \"#000000\",     \"font_subtitle_style\": FONT_STYLE.NORMAL,     \"font_subtitle_weight\": FONT_WEIGHT.NORMAL,     \"font_xlabel_size\": 10,     \"font_xlabel_color\": \"#000000\",     \"font_xlabel_style\": FONT_STYLE.NORMAL,     \"font_xlabel_weight\": FONT_WEIGHT.NORMAL,     \"font_ylabel_size\": 10,     \"font_ylabel_color\": \"#000000\",     \"font_ylabel_style\": FONT_STYLE.NORMAL,     \"font_ylabel_weight\": FONT_WEIGHT.NORMAL,     \"axes_spines_top_visible\": True,     \"axes_spines_right_visible\": True,     \"axes_spines_bottom_visible\": True,     \"axes_spines_left_visible\": True,     \"axes_spines_width\": 0.5,     \"axes_spines_zorder\": 100,     \"axes_ticks_length\": 2,     \"axes_ticks_label_size\": 9,     \"plot_legend_shadow\": False,     \"plot_legend_frameon\": True,     \"plot_legend_alignment\": \"left\",     \"plot_legend_font_size\": 9,     \"plot_legend_title_size\": 10,     \"plot_legend_label_color\": \"#000000\",     \"plot_area_alpha\": 0.3,     \"plot_area_color\": None,     \"plot_area_linewidth\": 0,     \"plot_area_hatch\": None,     \"plot_area_zorder\": 3,     \"plot_grid_alpha\": 1,     \"plot_grid_color\": \"#E6E6E6\",     \"plot_grid_linewidth\": 0.5,     \"plot_grid_linestyle\": LINE_STYLE.SOLID,     \"plot_grid_zorder\": 0,     \"plot_line_color\": None,     \"plot_line_style\": LINE_STYLE.SOLID,     \"plot_line_marker\": None,     \"plot_line_width\": 1,     \"plot_line_alpha\": 1.0,     \"plot_line_drawstyle\": LINE_DRAW_STYLE.DEFAULT,     \"plot_line_zorder\": 3,     \"plot_bar_color\": None,     \"plot_bar_alpha\": 1.0,     \"plot_bar_width\": 0.8,     \"plot_bar_zorder\": 3,     \"plot_bar_hatch\": None,     \"plot_bar_edge_width\": 0.5,     \"plot_bar_edge_color\": \"#000000\",     \"plot_bar_error_color\": \"#000000\",     \"plot_hist_color\": None,     \"plot_hist_alpha\": 1.0,     \"plot_hist_zorder\": 3,     \"plot_hist_fill\": None,     \"plot_hist_hatch\": None,     \"plot_hist_type\": \"bar\",     \"plot_hist_align\": \"mid\",     \"plot_hist_edge_width\": 0.5,     \"plot_hist_edge_color\": \"#000000\",     \"plot_vline_color\": None,     \"plot_vline_style\": LINE_STYLE.SOLID,     \"plot_vline_width\": 1,     \"plot_vline_alpha\": 1.0,     \"plot_hline_color\": None,     \"plot_hline_style\": LINE_STYLE.SOLID,     \"plot_hline_width\": 1,     \"plot_hline_alpha\": 1.0,     \"plot_heatmap_cmap\": COLORS.Blue,     \"plot_heatmap_alpha\": 1.0,     \"plot_heatmap_font_size\": 9,     \"plot_heatmap_font_color\": \"#000000\",     \"plot_heatmap_font_style\": FONT_STYLE.NORMAL,     \"plot_heatmap_font_weight\": FONT_WEIGHT.NORMAL, } <p>Once you define the theme, you can use it by updating the <code>config</code> module in the following way:</p> In\u00a0[17]: Copied! <pre>from datachart.config import config\n</pre> from datachart.config import config In\u00a0[18]: Copied! <pre>config.update_config(CUSTOM_THEME)\n</pre> config.update_config(CUSTOM_THEME) <p>Once you do this, all the plots will use the custom theme.</p>"},{"location":"how-to-guides/themes/#themes","title":"Themes\u00b6","text":""},{"location":"how-to-guides/themes/#default-theme","title":"Default Theme\u00b6","text":"<p>The THEME.DEFAULT is the theme, that the user will by default see when using the <code>datachart</code> package. To use it, no additional configuration is required.</p> <p>In case if the user uses a different theme, or if they change it by hand using the <code>config</code> module, the default theme will be reset in the following way:</p>"},{"location":"how-to-guides/themes/#greyscale-theme","title":"Greyscale Theme\u00b6","text":""},{"location":"how-to-guides/themes/#creating-your-own-theme","title":"Creating Your Own Theme\u00b6","text":""},{"location":"how-to-guides/charts/","title":"Charts","text":"<p>The datachart.charts module of the <code>datachart</code> package provides various chart types to create data visualizations. The module is designed to be highly customizable and easy to use.</p> <p>It offers a wide range of chart types, including line charts, bar charts, histograms, and more. The module allows users to customize the look and feel of their charts by providing attributes to control the colors, labels, and titles of the charts. The module also includes methods to create subplots, i.e., to display multiple charts in the same figure. This makes it easy to compare different data sets and highlight the details of each chart.</p> Chart Description Line Chart The showcase of the line chart. Bar Chart The showcase of the bar chart. Histogram The showcase of the histogram. Heatmap The showcase of the heatmap."},{"location":"how-to-guides/charts/barchart/","title":"Bar Chart","text":"<p>This section showcases the bar chart. It contains examples of how to create the bar chart using the datachart.charts.BarChart function.</p> <p>The examples sequentially build on each other, going from simple to complex.</p> <p>As mentioned above, the bar charts are created using the <code>BarChart</code> function found in the datachart.charts module. Let's import it:</p> In\u00a0[1]: Copied! <pre>from datachart.charts import BarChart\n</pre> from datachart.charts import BarChart <p>Double figure generation avoidence</p> <p>         To avoid double figure generation, the <code>BarChart</code> function is preceded by the <code>_ =</code> operator. The double figures are generated because <code>BarChart</code> returns the <code>plt.Figure</code> object, which is then used to save the figure locally.     </p> <p>For more details, see the datachart.typings.BarChartAttrs type.</p> <p>In this part, we show how to create a single bar chart using the <code>BarChart</code> function.</p> <p>Let us first import the necessary libraries:</p> In\u00a0[2]: Copied! <pre>import random\n</pre> import random <p>Basic example. Let us first create a basic bar chart showing a random distribution.</p> <p>The following example shows how only the <code>charts[\"data\"]</code> attribute is required to draw the bar chart.</p> In\u00a0[3]: Copied! <pre>NUM_OF_POINTS = 10\n</pre> NUM_OF_POINTS = 10 In\u00a0[4]: Copied! <pre>charts = {\n    \"data\": [\n        {\"label\": f\"xx{id}\", \"y\": 100 * (id + 1) * random.random()}\n        for id in range(NUM_OF_POINTS)\n    ],\n}\n</pre> charts = {     \"data\": [         {\"label\": f\"xx{id}\", \"y\": 100 * (id + 1) * random.random()}         for id in range(NUM_OF_POINTS)     ], } In\u00a0[5]: Copied! <pre>_ = BarChart(\n    {\n        # add the data to the chart\n        \"charts\": charts,\n    }\n)\n</pre> _ = BarChart(     {         # add the data to the chart         \"charts\": charts,     } ) In\u00a0[6]: Copied! <pre>_ = BarChart(\n    {\n        \"charts\": charts,\n        # add the title\n        \"title\": \"Title\",\n        # add the x and y axis labels\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n    }\n)\n</pre> _ = BarChart(     {         \"charts\": charts,         # add the title         \"title\": \"Title\",         # add the x and y axis labels         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",     } ) In\u00a0[7]: Copied! <pre>from datachart.constants import FIG_SIZE, SHOW_GRID\n</pre> from datachart.constants import FIG_SIZE, SHOW_GRID In\u00a0[8]: Copied! <pre>_ = BarChart(\n    {\n        \"charts\": charts,\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        # add to determine the figure size\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        # add to show the grid lines\n        \"show_grid\": SHOW_GRID.BOTH,\n    }\n)\n</pre> _ = BarChart(     {         \"charts\": charts,         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         # add to determine the figure size         \"figsize\": FIG_SIZE.A4_NARROW,         # add to show the grid lines         \"show_grid\": SHOW_GRID.BOTH,     } ) In\u00a0[9]: Copied! <pre>from datachart.constants import HATCH_STYLE\n</pre> from datachart.constants import HATCH_STYLE In\u00a0[10]: Copied! <pre>_ = BarChart(\n    {\n        \"charts\": {\n            \"data\": charts[\"data\"],\n            # define the style of the bars\n            \"style\": {\n                \"plot_bar_hatch\": HATCH_STYLE.DIAGONAL,\n                \"plot_bar_edge_width\": 0.5,\n                \"plot_bar_edge_color\": \"#08519c\",\n            },\n        },\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": SHOW_GRID.Y,\n    }\n)\n</pre> _ = BarChart(     {         \"charts\": {             \"data\": charts[\"data\"],             # define the style of the bars             \"style\": {                 \"plot_bar_hatch\": HATCH_STYLE.DIAGONAL,                 \"plot_bar_edge_width\": 0.5,                 \"plot_bar_edge_color\": \"#08519c\",             },         },         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": SHOW_GRID.Y,     } ) In\u00a0[11]: Copied! <pre>from datachart.constants import ORIENTATION\n</pre> from datachart.constants import ORIENTATION In\u00a0[12]: Copied! <pre>_ = BarChart(\n    {\n        \"charts\": {\n            \"data\": charts[\"data\"],\n            \"style\": {\n                \"plot_bar_hatch\": HATCH_STYLE.DIAGONAL,\n                \"plot_bar_edge_width\": 0.5,\n                \"plot_bar_edge_color\": \"#08519c\",\n            },\n        },\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        # change the grid to match the change in orientation\n        \"show_grid\": SHOW_GRID.X,\n        # change the orientation of the bars\n        \"orientation\": ORIENTATION.HORIZONTAL,\n    }\n)\n</pre> _ = BarChart(     {         \"charts\": {             \"data\": charts[\"data\"],             \"style\": {                 \"plot_bar_hatch\": HATCH_STYLE.DIAGONAL,                 \"plot_bar_edge_width\": 0.5,                 \"plot_bar_edge_color\": \"#08519c\",             },         },         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         # change the grid to match the change in orientation         \"show_grid\": SHOW_GRID.X,         # change the orientation of the bars         \"orientation\": ORIENTATION.HORIZONTAL,     } ) <p>Adding vertical lines. Within the <code>charts</code> attribute, define the attribute <code>vlines</code> with the datachart.typings.VLinePlotAttrs typing, which is either a <code>dict</code> or a <code>List[dict]</code> where each dictionary contains some of the following attributes:</p> <pre>{\n  \"x\":    Union[int, float],                 # The x-axis value (values are bar indices, e.g. 0, 1, 2, etc.)\n  \"ymin\": Optional[Union[int, float]],       # The minimum y-axis value\n  \"ymax\": Optional[Union[int, float]],       # The maximum y-axis value\n  \"style\": {                                 # The style of the line (optional)\n    \"plot_vline_color\": Optional[str],       # The color of the line (hex color code)\n    \"plot_vline_style\": Optional[LineStyle], # The line style (solid, dashed, etc.)\n    \"plot_vline_width\": Optional[float],     # The width of the line\n    \"plot_vline_alpha\": Optional[float],     # The alpha of the line (how visible the line is)\n  },\n  \"label\": Optional[str],                    # The label of the line\n}\n</pre> <p>Adding horizontal lines. Within the <code>charts</code> attribute, define the attribute <code>hlines</code>, with the datachart.typings.HLinePlotAttrs typing, which is either a <code>dict</code> or a <code>List[dict]</code> where each dictionary contains some of the following attributes:</p> <pre>{\n  \"y\":    Union[int, float],                 # The y-axis value\n  \"xmin\": Optional[Union[int, float]],       # The minimum x-axis value  (values are bar indices, e.g. 0, 1, 2, etc.)\n  \"xmax\": Optional[Union[int, float]],       # The maximum x-axis value  (values are bar indices, e.g. 0, 1, 2, etc.)\n  \"style\": {                                 # The style of the line (optional)\n    \"plot_hline_color\": Optional[str],       # The color of the line (hex color code)\n    \"plot_hline_style\": Optional[LineStyle], # The line style (solid, dashed, etc.)\n    \"plot_hline_width\": Optional[float],     # The width of the line\n    \"plot_hline_alpha\": Optional[float],     # The alpha of the line (how visible the line is)\n  },\n  \"label\": Optional[str],                    # The label of the line\n}\n</pre> <p>To add vertical and horizontal lines, simply add the <code>vlines</code> and <code>hlines</code> attributes into the input dictionary.</p> In\u00a0[13]: Copied! <pre>from datachart.constants import LINE_STYLE\n</pre> from datachart.constants import LINE_STYLE In\u00a0[14]: Copied! <pre>_ = BarChart(\n    {\n        \"charts\": {\n            \"data\": charts[\"data\"],\n            \"style\": {\n                \"plot_bar_hatch\": HATCH_STYLE.DIAGONAL,\n                \"plot_bar_edge_width\": 0.5,\n                \"plot_bar_edge_color\": \"#08519c\",\n            },\n            # add a list of vertical lines\n            \"vlines\": [\n                {\n                    \"x\": 2 * i,\n                    \"style\": {\n                        \"plot_vline_color\": \"green\",\n                        \"plot_vline_style\": LINE_STYLE.SOLID,\n                        \"plot_vline_width\": 1,\n                    },\n                }\n                for i in range(1, 4)\n            ],\n            # add a list of horizontal lines\n            \"hlines\": {\n                \"y\": 400,\n                \"style\": {\n                    \"plot_hline_color\": \"red\",\n                    \"plot_hline_style\": LINE_STYLE.DASHED,\n                    \"plot_hline_width\": 2,\n                    \"plot_hline_alpha\": 0.5,\n                },\n            },\n        },\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": SHOW_GRID.Y,\n    }\n)\n</pre> _ = BarChart(     {         \"charts\": {             \"data\": charts[\"data\"],             \"style\": {                 \"plot_bar_hatch\": HATCH_STYLE.DIAGONAL,                 \"plot_bar_edge_width\": 0.5,                 \"plot_bar_edge_color\": \"#08519c\",             },             # add a list of vertical lines             \"vlines\": [                 {                     \"x\": 2 * i,                     \"style\": {                         \"plot_vline_color\": \"green\",                         \"plot_vline_style\": LINE_STYLE.SOLID,                         \"plot_vline_width\": 1,                     },                 }                 for i in range(1, 4)             ],             # add a list of horizontal lines             \"hlines\": {                 \"y\": 400,                 \"style\": {                     \"plot_hline_color\": \"red\",                     \"plot_hline_style\": LINE_STYLE.DASHED,                     \"plot_hline_width\": 2,                     \"plot_hline_alpha\": 0.5,                 },             },         },         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": SHOW_GRID.Y,     } ) In\u00a0[15]: Copied! <pre># the charts data is now a list of charts\ncharts = [\n    {\n        \"data\": [\n            {\"label\": f\"xx{id}\", \"y\": 100 * (id + 1) * random.random()}\n            for id in range(NUM_OF_POINTS)\n        ],\n    }\n    for _ in range(2)\n]\n</pre> # the charts data is now a list of charts charts = [     {         \"data\": [             {\"label\": f\"xx{id}\", \"y\": 100 * (id + 1) * random.random()}             for id in range(NUM_OF_POINTS)         ],     }     for _ in range(2) ] In\u00a0[16]: Copied! <pre>_ = BarChart(\n    {\n        # use a list of charts to define multiple bar charts\n        \"charts\": charts,\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": SHOW_GRID.Y,\n    }\n)\n</pre> _ = BarChart(     {         # use a list of charts to define multiple bar charts         \"charts\": charts,         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": SHOW_GRID.Y,     } ) In\u00a0[17]: Copied! <pre>charts = [\n    {\n        **chart,\n        # add a subtitle to the bar chart (see below for more info)\n        \"subtitle\": f\"Bars {idx+1}\",\n    }\n    for idx, chart in enumerate(charts)\n]\n</pre> charts = [     {         **chart,         # add a subtitle to the bar chart (see below for more info)         \"subtitle\": f\"Bars {idx+1}\",     }     for idx, chart in enumerate(charts) ] In\u00a0[18]: Copied! <pre>_ = BarChart(\n    {\n        \"charts\": charts,\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": SHOW_GRID.Y,\n        # show the legend\n        \"show_legend\": True,\n    }\n)\n</pre> _ = BarChart(     {         \"charts\": charts,         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": SHOW_GRID.Y,         # show the legend         \"show_legend\": True,     } ) In\u00a0[19]: Copied! <pre>_ = BarChart(\n    {\n        \"charts\": charts,\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": SHOW_GRID.Y,\n        # show each chart in its own subplot\n        \"subplots\": True,\n    }\n)\n</pre> _ = BarChart(     {         \"charts\": charts,         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": SHOW_GRID.Y,         # show each chart in its own subplot         \"subplots\": True,     } ) In\u00a0[20]: Copied! <pre>_ = BarChart(\n    {\n        \"charts\": charts,\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": SHOW_GRID.Y,\n        \"subplots\": True,\n        # share the x-axis across subplots\n        \"sharex\": True,\n        # share the y-axis across subplots\n        \"sharey\": True,\n    }\n)\n</pre> _ = BarChart(     {         \"charts\": charts,         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": SHOW_GRID.Y,         \"subplots\": True,         # share the x-axis across subplots         \"sharex\": True,         # share the y-axis across subplots         \"sharey\": True,     } ) In\u00a0[21]: Copied! <pre>_ = BarChart(\n    {\n        \"charts\": charts,\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"subplots\": True,\n        \"sharex\": True,\n        \"sharey\": True,\n        # change the grid to match the change in orientation\n        \"show_grid\": SHOW_GRID.X,\n        # change the orientation of the bars\n        \"orientation\": ORIENTATION.HORIZONTAL,\n    }\n)\n</pre> _ = BarChart(     {         \"charts\": charts,         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"subplots\": True,         \"sharex\": True,         \"sharey\": True,         # change the grid to match the change in orientation         \"show_grid\": SHOW_GRID.X,         # change the orientation of the bars         \"orientation\": ORIENTATION.HORIZONTAL,     } ) In\u00a0[22]: Copied! <pre>charts = [\n    {\n        **chart,\n        # add the yerr value to plot the error bars\n        \"data\": [{**d, \"yerr\": 50 * random.random()} for d in chart[\"data\"]],\n        \"style\": {\n            # add the plot error bar color\n            \"plot_bar_error_color\": \"#000000\",\n        },\n    }\n    for chart in charts\n]\n</pre> charts = [     {         **chart,         # add the yerr value to plot the error bars         \"data\": [{**d, \"yerr\": 50 * random.random()} for d in chart[\"data\"]],         \"style\": {             # add the plot error bar color             \"plot_bar_error_color\": \"#000000\",         },     }     for chart in charts ] In\u00a0[23]: Copied! <pre>_ = BarChart(\n    {\n        \"charts\": charts,\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": SHOW_GRID.Y,\n        \"subplots\": True,\n        \"sharex\": True,\n        \"sharey\": True,\n        # show the error bars\n        \"show_yerr\": True,\n        # make sure the y-axis starts at 0\n        \"ymin\": 0,\n    }\n)\n</pre> _ = BarChart(     {         \"charts\": charts,         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": SHOW_GRID.Y,         \"subplots\": True,         \"sharex\": True,         \"sharey\": True,         # show the error bars         \"show_yerr\": True,         # make sure the y-axis starts at 0         \"ymin\": 0,     } ) In\u00a0[24]: Copied! <pre>from datachart.constants import SCALE\n</pre> from datachart.constants import SCALE In\u00a0[25]: Copied! <pre>charts = [\n    {**chart, \"data\": [{\"label\": d[\"label\"], \"y\": d[\"y\"]} for d in chart[\"data\"]]}\n    for chart in charts\n]\n</pre> charts = [     {**chart, \"data\": [{\"label\": d[\"label\"], \"y\": d[\"y\"]} for d in chart[\"data\"]]}     for chart in charts ] <p>To showcase the supported scales, we iterate through all of the scales options.</p> In\u00a0[26]: Copied! <pre>for scale in [SCALE.LINEAR, SCALE.LOG, SCALE.SYMLOG, SCALE.ASINH]:\n    figure = BarChart(\n        {\n            \"charts\": charts,\n            \"title\": f\"Graph showcasing the '{scale}' scale\",\n            \"xlabel\": \"the global x-axis label\",\n            \"ylabel\": \"the global y-axis label\",\n            \"figsize\": FIG_SIZE.A4_NARROW,\n            \"show_grid\": SHOW_GRID.Y,\n            \"subplots\": True,\n            \"sharex\": True,\n            \"sharey\": True,\n            \"show_yerr\": True,\n            \"ymin\": 1 if scale in [SCALE.LOG, SCALE.SYMLOG, SCALE.ASINH] else 0,\n            # set the scale of the x and y axes\n            \"scaley\": scale,\n        }\n    )\n</pre> for scale in [SCALE.LINEAR, SCALE.LOG, SCALE.SYMLOG, SCALE.ASINH]:     figure = BarChart(         {             \"charts\": charts,             \"title\": f\"Graph showcasing the '{scale}' scale\",             \"xlabel\": \"the global x-axis label\",             \"ylabel\": \"the global y-axis label\",             \"figsize\": FIG_SIZE.A4_NARROW,             \"show_grid\": SHOW_GRID.Y,             \"subplots\": True,             \"sharex\": True,             \"sharey\": True,             \"show_yerr\": True,             \"ymin\": 1 if scale in [SCALE.LOG, SCALE.SYMLOG, SCALE.ASINH] else 0,             # set the scale of the x and y axes             \"scaley\": scale,         }     ) In\u00a0[27]: Copied! <pre>from datachart.utils import save_figure\n</pre> from datachart.utils import save_figure In\u00a0[28]: Copied! <pre>save_figure(figure, \"./fig_bar_chart.png\", dpi=300)\n</pre> save_figure(figure, \"./fig_bar_chart.png\", dpi=300) <p>The figure should be saved in the current working directory.</p>"},{"location":"how-to-guides/charts/barchart/#bar-chart","title":"Bar Chart\u00b6","text":""},{"location":"how-to-guides/charts/barchart/#bar-chart-input-attributes","title":"Bar Chart Input Attributes\u00b6","text":"<p>The <code>BarChart</code> function accepts the attributes of the datachart.typings.BarChartAttrs type. In a nutshell, the input is a <code>dict</code> object containing the <code>charts</code> attribute, which is either a <code>dict</code> or a <code>List[dict]</code> where each dictionary contains some of the following attributes:</p> <pre>{\n  \"data\": [{                                            # A list of bar data points\n    \"label\": str,                                       # The x-axis value\n    \"y\":     Union[int, float],                         # The y-axis value\n    \"yerr\":  Optional[Union[int, float]]                # The y-axis error value\n  }],\n  \"style\": {                                            # The style of the bar (optional)\n    \"plot_bar_color\":       Union[str, None],           # The color of the bar\n    \"plot_bar_alpha\":       Union[float, None],         # The alpha of the bar\n    \"plot_bar_width\":       Union[int, float, None],    # The width of the bar\n    \"plot_bar_zorder\":      Union[int, float, None],    # The z-order of the bar\n    \"plot_bar_hatch\":       Union[HATCH_STYLE, None],   # The hatch style of the bar\n    \"plot_bar_edge_width\":  Union[int, float, None],    # The edge line width of the edge\n    \"plot_bar_edge_color\":  Union[str, None],           # The edge line color\n    \"plot_bar_error_color\": Union[str, None],           # The error line color\n  },\n  \"subtitle\": Optional[str],                            # The title of the chart\n  \"xlabel\":   Optional[str],                            # The x-axis label\n  \"ylabel\":   Optional[str],                            # The y-axis label\n\n  \"xticks\": Optional[List[Union[int, float]]],          # the x-axis ticks\n  \"xticklabels\": Optional[List[Union[str, float, str]], # the x-axis tick labels (must be same length as xticks)\n  \"xtickrotate\": Optional[int],                         # the x-axis tick labels rotation\n  \"yticks\": Optional[List[Union[int, float]]],          # the y-axis ticks\n  \"yticklabels\": Optional[List[Union[str, float, str]], # the y-axis tick labels (must be same length as yticks)\n  \"ytickrotate\": Optional[int],                         # the y-axis tick labels rotation\n\n  \"vlines\": Optional[Union[dict, None]],                # the vertical lines\n  \"hlines\": Optional[Union[dict, None]],                # the horizontal lines\n}\n</pre>"},{"location":"how-to-guides/charts/barchart/#single-bar-chart","title":"Single Bar Chart\u00b6","text":""},{"location":"how-to-guides/charts/barchart/#chart-title-and-axis-labels","title":"Chart title and axis labels\u00b6","text":"<p>To add the chart title and axis labels, simply add the <code>title</code>, <code>xlabel</code> and <code>ylabel</code> attributes.</p>"},{"location":"how-to-guides/charts/barchart/#figure-size-and-grid","title":"Figure size and grid\u00b6","text":"<p>To change the figure size, simply add the <code>figsize</code> attribute. The <code>figsize</code> attribute can be a tuple (width, height), values are in inches. The <code>datachart</code> package provides a datachart.constants.FIG_SIZE constant, which contains some of the predefined figure sizes.</p> <p>To add the grid, simply add the <code>show_grid</code> attribute. The possible options are:</p> Option Description <code>\"both\"</code> shows both the x-axis and the y-axis gridlines. <code>\"x\"</code> shows only the x-axis grid lines. <code>\"y\"</code> shows only the y-axis grid lines. <p>Again, <code>datachart</code> provides a datachart.constants.SHOW_GRID constant, which contains the supported options.</p>"},{"location":"how-to-guides/charts/barchart/#bar-style","title":"Bar style\u00b6","text":"<p>To change a single bar style simply add the <code>style</code> attribute with the corresponding attributes. The supported attributes are shown in the datachart.typings.BarStyleAttrs type, which contains the following attributes:</p> Attribute Description <code>\"plot_bar_color\"</code> The color of the bar (hex color code). <code>\"plot_bar_alpha\"</code> The alpha of the bar (how visible the bar is). <code>\"plot_bar_width\"</code> The width of the bar. <code>\"plot_bar_zorder\"</code> The zorder of the bar. <code>\"plot_bar_hatch\"</code> The hatch style of the bar. <code>\"plot_bar_edge_width\"</code> The edge line width of the edge. <code>\"plot_bar_edge_color\"</code> The edge line color (hex color code). <code>\"plot_bar_error_color\"</code> The error line color (hex color code). <p>Again, to help with the style settings, the datachart.constants module contains the following constants:</p> Constant Description datachart.constants.HATCH_STYLE The hatch style of the bar."},{"location":"how-to-guides/charts/barchart/#bar-orientation","title":"Bar orientation\u00b6","text":"<p>To change the orientation of the bars, simply add the <code>orientation</code> attribute, which supports the following values:</p> Value Description <code>\"horizontal\"</code> The bars are horizontal. <code>\"vertical\"</code> The bars are vertical. <p>Again, to help with the style settings, the datachart.constants module contains the following constants:</p> Constant Description datachart.constants.ORIENTATION The orientation of the bars."},{"location":"how-to-guides/charts/barchart/#adding-vertical-and-horizontal-lines","title":"Adding vertical and horizontal lines\u00b6","text":""},{"location":"how-to-guides/charts/barchart/#multiple-bar-charts","title":"Multiple Bar Charts\u00b6","text":"<p>To add multiple bar charts, simply add the <code>charts</code> attribute with a list of charts, as shown below.</p> <p>Attributes same as creating a single chart</p> <p>         We designed the <code>datachart.charts.*</code> functions to use the same attribute naming when possible. To create multiple charts, the <code>charts</code> attribute becomes a list of dictionaries with the same attributes as when creating a single chart.     </p>"},{"location":"how-to-guides/charts/barchart/#sub-chart-subtitles","title":"Sub-chart subtitles\u00b6","text":"<p>We can name each chart by adding the <code>subtitle</code> attribute to each chart. In addition, to help with discerning which chart is which, use the <code>show_legend</code> attribute to show the legend of the charts.</p>"},{"location":"how-to-guides/charts/barchart/#subplots","title":"Subplots\u00b6","text":"<p>To draw multiple charts in each subplot, simply add the <code>subplots</code> attribute. The chart's <code>subtitle</code> are then added at the top of each subplot, while the <code>title</code>, <code>xlabel</code> and <code>ylabel</code> are positioned to be global for all charts.</p>"},{"location":"how-to-guides/charts/barchart/#sharing-the-x-axis-andor-y-axis-across-subplots","title":"Sharing the x-axis and/or y-axis across subplots\u00b6","text":"<p>To share the x-axis and/or y-axis across subplots, simply add the <code>sharex</code> and/or <code>sharey</code> attributes, which are boolean values that specify whether to share the axis across all subplots.</p>"},{"location":"how-to-guides/charts/barchart/#subplot-orientation","title":"Subplot orientation\u00b6","text":"<p>The <code>orientation</code> attribute can be used to change the orientation of all subplots.</p>"},{"location":"how-to-guides/charts/barchart/#additional-features","title":"Additional Features\u00b6","text":""},{"location":"how-to-guides/charts/barchart/#error-bars","title":"Error bars\u00b6","text":"<p>To add error bars to each bar chart, first define the <code>yerr</code> in the <code>data</code> attribute. Afterwards, add the <code>show_yerr</code> attribute.</p>"},{"location":"how-to-guides/charts/barchart/#axis-scales","title":"Axis scales\u00b6","text":"<p>The user can change the axis scale using the <code>scaley</code> attributes. The supported scale options are:</p> Options Description <code>\"linear\"</code> The linear scale. <code>\"log\"</code> The log scale. <code>\"symlog\"</code> The symmetric log scale. <code>\"asinh\"</code> The asinh scale. <p>Again, to help with the options settings, the datachart.constants module contains the following constants:</p> Constant Description datachart.constants.SCALE The axis options."},{"location":"how-to-guides/charts/barchart/#saving-the-chart-as-an-image","title":"Saving the Chart as an Image\u00b6","text":"<p>To save the chart as an image, use the datachart.utils.save_figure function.</p>"},{"location":"how-to-guides/charts/heatmap/","title":"Heatmap","text":"<p>This section showcases the heatmap chart. It contains examples of how to create the heatmap using the datachart.charts.Heatmap function.</p> <p>The examples sequentially build on each other, going from simple to complex.</p> <p>As mentioned above, the heatmap are created using the <code>Heatmap</code> function found in the datachart.charts module. Let's import it:</p> In\u00a0[1]: Copied! <pre>from datachart.charts import Heatmap\n</pre> from datachart.charts import Heatmap <p>Double figure generation avoidence</p> <p>         To avoid double figure generation, the <code>Heatmap</code> function is preceded by the <code>_ =</code> operator. The double figures are generated because <code>Heatmap</code> returns the <code>plt.Figure</code> object, which is then used to save the figure locally.     </p> <p>For more details, see the datachart.typings.HeatmapChartAttrs type.</p> <p>Basic example. Let us first create a basic heatmap chart showing a square distribution.</p> <p>The following example shows how only the <code>charts[\"data\"]</code> attribute is required to draw the heatmap chart.</p> In\u00a0[2]: Copied! <pre>_ = Heatmap(\n    {\n        # add the data to the chart\n        \"charts\": {\"data\": [[x + y for x in range(8)] for y in range(8)]}\n    }\n)\n</pre> _ = Heatmap(     {         # add the data to the chart         \"charts\": {\"data\": [[x + y for x in range(8)] for y in range(8)]}     } ) In\u00a0[3]: Copied! <pre>_ = Heatmap(\n    {\n        \"charts\": {\"data\": [[x + y for x in range(8)] for y in range(8)]},\n        # add the title\n        \"title\": \"Title\",\n        # add the x and y axis labels\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n    }\n)\n</pre> _ = Heatmap(     {         \"charts\": {\"data\": [[x + y for x in range(8)] for y in range(8)]},         # add the title         \"title\": \"Title\",         # add the x and y axis labels         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",     } ) In\u00a0[4]: Copied! <pre>from datachart.constants import FIG_SIZE\n</pre> from datachart.constants import FIG_SIZE In\u00a0[5]: Copied! <pre>_ = Heatmap(\n    {\n        \"charts\": {\"data\": [[x + y for x in range(8)] for y in range(8)]},\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        # add to determine the figure size\n        \"figsize\": FIG_SIZE.SQUARE_SMALL,\n    }\n)\n</pre> _ = Heatmap(     {         \"charts\": {\"data\": [[x + y for x in range(8)] for y in range(8)]},         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         # add to determine the figure size         \"figsize\": FIG_SIZE.SQUARE_SMALL,     } ) In\u00a0[6]: Copied! <pre>_ = Heatmap(\n    {\n        \"charts\": {\n            \"data\": [[x + y for x in range(8)] for y in range(8)],\n        },\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.SQUARE_SMALL,\n        # add to determine if the heatmap values should be shown\n        \"show_heatmap_values\": True,\n        # add to determine if the colorbars should be shown\n        \"show_colorbars\": True,\n    }\n)\n</pre> _ = Heatmap(     {         \"charts\": {             \"data\": [[x + y for x in range(8)] for y in range(8)],         },         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.SQUARE_SMALL,         # add to determine if the heatmap values should be shown         \"show_heatmap_values\": True,         # add to determine if the colorbars should be shown         \"show_colorbars\": True,     } ) In\u00a0[7]: Copied! <pre>from datachart.constants import VALFMT\n</pre> from datachart.constants import VALFMT In\u00a0[8]: Copied! <pre>_ = Heatmap(\n    {\n        \"charts\": {\n            \"data\": [[x + y for x in range(8)] for y in range(8)],\n            # add the value format\n            \"valfmt\": VALFMT.DECIMAL,\n        },\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.SQUARE_SMALL,\n        \"show_heatmap_values\": True,\n        \"show_colorbars\": True,\n    }\n)\n</pre> _ = Heatmap(     {         \"charts\": {             \"data\": [[x + y for x in range(8)] for y in range(8)],             # add the value format             \"valfmt\": VALFMT.DECIMAL,         },         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.SQUARE_SMALL,         \"show_heatmap_values\": True,         \"show_colorbars\": True,     } ) In\u00a0[9]: Copied! <pre>_ = Heatmap(\n    {\n        \"charts\": {\n            \"data\": [[x + y for x in range(8)] for y in range(8)],\n            \"valfmt\": VALFMT.DECIMAL,\n            # add the x-axis ticks, labels and rotation\n            \"xticks\": [idx for idx in range(8)],\n            \"xticklabels\": [f\"xxx{idx}\" for idx in range(8)],\n            \"xtickrotate\": 45,\n            # add the y-axis ticks, labels and rotation\n            \"yticks\": [idx for idx in range(8)],\n            \"yticklabels\": [f\"xxx{idx}\" for idx in range(8)],\n            \"ytickrotate\": 0,\n        },\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.SQUARE_SMALL,\n        \"show_heatmap_values\": True,\n        \"show_colorbars\": True,\n    }\n)\n</pre> _ = Heatmap(     {         \"charts\": {             \"data\": [[x + y for x in range(8)] for y in range(8)],             \"valfmt\": VALFMT.DECIMAL,             # add the x-axis ticks, labels and rotation             \"xticks\": [idx for idx in range(8)],             \"xticklabels\": [f\"xxx{idx}\" for idx in range(8)],             \"xtickrotate\": 45,             # add the y-axis ticks, labels and rotation             \"yticks\": [idx for idx in range(8)],             \"yticklabels\": [f\"xxx{idx}\" for idx in range(8)],             \"ytickrotate\": 0,         },         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.SQUARE_SMALL,         \"show_heatmap_values\": True,         \"show_colorbars\": True,     } ) <p>To change a single heatmap style simply add the <code>style</code> attribute with the corresponding attributes. The supported attributes are shown in the datachart.typings.HeatmapStyleAttrs type, which contains the following attributes:</p> Attribute Description <code>\"plot_heatmap_cmap\"</code> The colormap used to draw the heatmap. <code>\"plot_heatmap_alpha\"</code> The alpha of the heatmap (how visible the heatmap is). <code>\"plot_heatmap_font_size\"</code> The font size. <code>\"plot_heatmap_font_color\"</code> The font color. <code>\"plot_heatmap_font_style\"</code> The font style (normal, italic, etc.). <code>\"plot_heatmap_font_weight\"</code> The font weight (normal, bold, etc.). <p>Again, to help with the style settings, the datachart.constants module contains the following constants:</p> Constant Description datachart.constants.COLORS The colormap used to draw the heatmap. datachart.constants.FONT_STYLE The font style (normal, italic, etc.). datachart.constants.FONT_WEIGHT The font weight (normal, bold, etc.). In\u00a0[10]: Copied! <pre>from datachart.constants import COLORS, FONT_STYLE, FONT_WEIGHT\n</pre> from datachart.constants import COLORS, FONT_STYLE, FONT_WEIGHT In\u00a0[11]: Copied! <pre>_ = Heatmap(\n    {\n        \"charts\": {\n            \"data\": [[x + y for x in range(8)] for y in range(8)],\n            \"valfmt\": VALFMT.DECIMAL,\n            # define the style of the heatmap\n            \"style\": {\n                \"plot_heatmap_cmap\": COLORS.GnBu,\n                \"plot_heatmap_font_style\": FONT_STYLE.ITALIC,\n                \"plot_heatmap_font_weight\": FONT_WEIGHT.BOLD,\n            }\n        },\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.SQUARE_SMALL,\n        \"show_heatmap_values\": True,\n        \"show_colorbars\": True,\n    }\n)\n</pre> _ = Heatmap(     {         \"charts\": {             \"data\": [[x + y for x in range(8)] for y in range(8)],             \"valfmt\": VALFMT.DECIMAL,             # define the style of the heatmap             \"style\": {                 \"plot_heatmap_cmap\": COLORS.GnBu,                 \"plot_heatmap_font_style\": FONT_STYLE.ITALIC,                 \"plot_heatmap_font_weight\": FONT_WEIGHT.BOLD,             }         },         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.SQUARE_SMALL,         \"show_heatmap_values\": True,         \"show_colorbars\": True,     } ) In\u00a0[12]: Copied! <pre>from datachart.constants import NORMALIZE\n</pre> from datachart.constants import NORMALIZE In\u00a0[13]: Copied! <pre>_ = Heatmap(\n    {\n        \"charts\": {\n            \"data\": [[x + y for x in range(8)] for y in range(8)],\n            # define the normalization\n            \"norm\": NORMALIZE.LOG,\n            \"valfmt\": VALFMT.DECIMAL,\n            \"style\": {\n                \"plot_heatmap_cmap\": COLORS.GnBu,\n            }\n        },\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.SQUARE_SMALL,\n        \"show_heatmap_values\": True,\n        \"show_colorbars\": True,\n    }\n)\n</pre> _ = Heatmap(     {         \"charts\": {             \"data\": [[x + y for x in range(8)] for y in range(8)],             # define the normalization             \"norm\": NORMALIZE.LOG,             \"valfmt\": VALFMT.DECIMAL,             \"style\": {                 \"plot_heatmap_cmap\": COLORS.GnBu,             }         },         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.SQUARE_SMALL,         \"show_heatmap_values\": True,         \"show_colorbars\": True,     } ) In\u00a0[14]: Copied! <pre>_ = Heatmap(\n    {\n        # use a list of charts to define multiple heatmaps\n        \"charts\": [{\n            \"data\": [[x + y for x in range(8)] for y in range(8)],\n            \"valfmt\": VALFMT.DECIMAL,\n            \"style\": {\n                \"plot_heatmap_cmap\": COLORS.GnBu,\n            }\n        }, {\n            \"data\": [[1 / (x + y + 1) for x in range(8)] for y in range(8)],\n            \"valfmt\": VALFMT.DECIMAL,\n        }],\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_REGULAR,\n        \"show_heatmap_values\": True,\n        \"show_colorbars\": True,\n    }\n)\n</pre> _ = Heatmap(     {         # use a list of charts to define multiple heatmaps         \"charts\": [{             \"data\": [[x + y for x in range(8)] for y in range(8)],             \"valfmt\": VALFMT.DECIMAL,             \"style\": {                 \"plot_heatmap_cmap\": COLORS.GnBu,             }         }, {             \"data\": [[1 / (x + y + 1) for x in range(8)] for y in range(8)],             \"valfmt\": VALFMT.DECIMAL,         }],         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_REGULAR,         \"show_heatmap_values\": True,         \"show_colorbars\": True,     } ) In\u00a0[15]: Copied! <pre>figure = Heatmap(\n    {\n        \"charts\": [{\n            \"data\": [[x + y for x in range(8)] for y in range(8)],\n            \"valfmt\": VALFMT.DECIMAL,\n            \"style\": {\n                \"plot_heatmap_cmap\": COLORS.GnBu,\n            },\n            # add a subtitle to the chart\n            \"subtitle\": \"Subtitle 1\",\n        }, {\n            \"data\": [[1 / (x + y + 1) for x in range(8)] for y in range(8)],\n            \"valfmt\": VALFMT.DECIMAL,\n            # add a subtitle to the chart\n            \"subtitle\": \"Subtitle 2\",\n        }],\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_REGULAR,\n        \"show_heatmap_values\": True,\n        \"show_colorbars\": True,\n    }\n)\n</pre> figure = Heatmap(     {         \"charts\": [{             \"data\": [[x + y for x in range(8)] for y in range(8)],             \"valfmt\": VALFMT.DECIMAL,             \"style\": {                 \"plot_heatmap_cmap\": COLORS.GnBu,             },             # add a subtitle to the chart             \"subtitle\": \"Subtitle 1\",         }, {             \"data\": [[1 / (x + y + 1) for x in range(8)] for y in range(8)],             \"valfmt\": VALFMT.DECIMAL,             # add a subtitle to the chart             \"subtitle\": \"Subtitle 2\",         }],         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_REGULAR,         \"show_heatmap_values\": True,         \"show_colorbars\": True,     } ) In\u00a0[16]: Copied! <pre>from datachart.utils import save_figure\n</pre> from datachart.utils import save_figure In\u00a0[17]: Copied! <pre>save_figure(figure, \"./fig_heatmap.png\", dpi=300)\n</pre> save_figure(figure, \"./fig_heatmap.png\", dpi=300) <p>The figure should be saved in the current working directory.</p> In\u00a0[18]: Copied! <pre>_ = Heatmap(\n    {\n        \"charts\": [{\n            \"subtitle\": \"Subtitle 1\",\n            \"data\": [[x + y for x in range(8)] for y in range(8)],\n            \"valfmt\": VALFMT.DECIMAL,\n            \"style\": {\n                \"plot_heatmap_cmap\": COLORS.GnBu,\n            }\n        }, {\n            \"subtitle\": \"Subtitle 2\",\n            \"data\": [[10 / (x + y + 1) for x in range(8)] for y in range(8)],\n            \"valfmt\": VALFMT.DECIMAL,\n        }],\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_REGULAR,\n        \"show_heatmap_values\": True,\n        \"show_colorbars\": True,\n    }\n)\n</pre> _ = Heatmap(     {         \"charts\": [{             \"subtitle\": \"Subtitle 1\",             \"data\": [[x + y for x in range(8)] for y in range(8)],             \"valfmt\": VALFMT.DECIMAL,             \"style\": {                 \"plot_heatmap_cmap\": COLORS.GnBu,             }         }, {             \"subtitle\": \"Subtitle 2\",             \"data\": [[10 / (x + y + 1) for x in range(8)] for y in range(8)],             \"valfmt\": VALFMT.DECIMAL,         }],         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_REGULAR,         \"show_heatmap_values\": True,         \"show_colorbars\": True,     } )"},{"location":"how-to-guides/charts/heatmap/#heatmap","title":"Heatmap\u00b6","text":""},{"location":"how-to-guides/charts/heatmap/#heatmap-input-attributes","title":"Heatmap Input Attributes\u00b6","text":"<p>The <code>Heatmap</code> function accepts the attributes of the datachart.typings.HeatmapChartAttrs type. In a nutshell, the input is a <code>dict</code> object containing the <code>charts</code> attribute, which is either a <code>dict</code> or a <code>List[dict]</code> where each dictionary contains some of the following attributes:</p> <pre>{\n  \"data\": List[List[Union[int, float, None]]],                  # The data of the chart\n  \"style\": {                                                    # The style of the heatmap (optional)\n    \"plot_heatmap_cmap\":      Optional[str],                    # The color map of the heatmap\n    \"plot_heatmap_alpha\":     Optional[float],                  # The heatmap alpha (opacity)\n    \"plot_heatmap_font_size\": Optional[Union[int, float, str]], # The heatmap cell font size\n    \"plot_heatmap_font_color\": Optional[str],                   # The heatmap cell font color\n    \"plot_heatmap_font_width\": Optional[float],                 # The heatmap cell font width\n    \"plot_heatmap_font_alpha\": Optional[float],                 # The heatmap cell font alpha (opacity)\n  },\n  \"subtitle\": Optional[str],                                    # The title of the chart\n  \"xlabel\":   Optional[str],                                    # The x-axis label\n  \"ylabel\":   Optional[str],                                    # The y-axis label\n\n  \"xticks\": Optional[List[Union[int, float]]],                  # the x-axis ticks\n  \"xticklabels\": Optional[List[Union[str, float, str]],         # the x-axis tick labels (must be same length as xticks)\n  \"xtickrotate\": Optional[int],                                 # the x-axis tick labels rotation\n  \"yticks\": Optional[List[Union[int, float]]],                  # the y-axis ticks\n  \"yticklabels\": Optional[List[Union[str, float, str]],         # the y-axis tick labels (must be same length as yticks)\n  \"ytickrotate\": Optional[int],                                 # the y-axis tick labels rotation\n\n  \"colormap\": {\n    \"orientation\": Optional[ORIENTATION],                       # the colormap orientation\n  }\n}\n</pre>"},{"location":"how-to-guides/charts/heatmap/#single-heatmap-chart","title":"Single Heatmap Chart\u00b6","text":"<p>In this part, we show how to create a single heatmap chart using the <code>Heatmap</code> function.</p>"},{"location":"how-to-guides/charts/heatmap/#chart-title-and-axis-labels","title":"Chart title and axis labels\u00b6","text":"<p>To add the chart title and axis labels, simply add the <code>title</code>, <code>xlabel</code> and <code>ylabel</code> attributes.</p>"},{"location":"how-to-guides/charts/heatmap/#figure-size","title":"Figure size\u00b6","text":"<p>To change the figure size, simply add the <code>figsize</code> attribute. The <code>figsize</code> attribute can be a tuple (width, height), values are in inches. The <code>datachart</code> package provides a datachart.constants.FIG_SIZE constant, which contains some of the predefined figure sizes.</p>"},{"location":"how-to-guides/charts/heatmap/#colorbar-and-heatmap-values","title":"Colorbar and heatmap values\u00b6","text":"<p>To add the colorbar, simply add the <code>show_colorbar</code> attribute. In addition, to add the heatmap values, simply add the <code>show_heatmap_values</code> attribute.</p>"},{"location":"how-to-guides/charts/heatmap/#format-heatmap-values","title":"Format heatmap values\u00b6","text":"<p>To format the values shown in the heatmap, add the <code>valfmt</code> attribute, which is a <code>string</code> depicting how to format the heatmap values. Examples of such formats are:</p> Format Description <code>\"{x}\"</code> Formats the value as is (no change to the value). <code>\"{x:d}\"</code> Formats the value as an integer. <code>\"{x:.2f}\"</code> Formats the value as a float with two decimal places. <code>\"{x:.2%}\"</code> Formats the value as a percentage with two decimal places. <p>Required presence of <code>x</code></p> <p>         To format the heatmap values, the <code>x</code> value must be present in the string. For instance <code>\"{z:.2f}\"</code> is not a valid format, and <code>z</code> should be replaced with <code>x</code>.     </p> <p>Again, to help with the style settings, the datachart.constants module contains the following constants:</p> Constant Description datachart.constants.VALFMT The predefined value formats."},{"location":"how-to-guides/charts/heatmap/#ticks-and-labels","title":"Ticks and labels\u00b6","text":"<p>To add the labels to the x and y axis, add the <code>xticklabels</code> and <code>yticklabels</code> attributes. The positions of the ticks are determined by the <code>xticks</code> and <code>yticks</code> attributes. To define the rotation of the labels, add the <code>xtickrotate</code> and <code>ytickrotate</code> attributes.</p>"},{"location":"how-to-guides/charts/heatmap/#heatmap-style","title":"Heatmap style\u00b6","text":""},{"location":"how-to-guides/charts/heatmap/#heatmap-normalization","title":"Heatmap normalization\u00b6","text":"<p>To change how the heatmap colors is normalized, add the <code>norm</code> attribute inside the <code>chart</code> attribute. The possible options are:</p> Option Description <code>None</code> No normalization. <code>\"linear\"</code> Linear normalization. <code>\"log\"</code> Log normalization. <code>\"symlog\"</code> Symlog normalization. <code>\"asinh\"</code> Asinh normalization. <p>Again, <code>datachart</code> provides a datachart.constants.NORMALIZE constant, which contains the supported options.</p>"},{"location":"how-to-guides/charts/heatmap/#multiple-heatmap-charts","title":"Multiple Heatmap Charts\u00b6","text":"<p>To add multiple heatmaps charts, simply add the <code>charts</code> attribute with a list of charts, as shown below.</p> <p>Attributes same as creating a single chart</p> <p>         We designed the <code>datachart.charts.*</code> functions to use the same attribute naming when possible. To create multiple charts, the <code>charts</code> attribute becomes a list of dictionaries with the same attributes as when creating a single chart.     </p>"},{"location":"how-to-guides/charts/heatmap/#sub-chart-subtitles","title":"Sub-chart subtitles\u00b6","text":"<p>We can name each chart by adding the <code>subtitle</code> attribute to each chart.</p>"},{"location":"how-to-guides/charts/heatmap/#saving-the-chart-as-an-image","title":"Saving the Chart as an Image\u00b6","text":"<p>To save the chart as an image, use the datachart.utils.save_figure function.</p>"},{"location":"how-to-guides/charts/heatmap/#example-use-cases","title":"Example Use Cases\u00b6","text":""},{"location":"how-to-guides/charts/heatmap/#example-1-distance-comparison","title":"Example 1: Distance comparison\u00b6","text":"<p>Under development</p> <p>         This example is still under development. If you are interested in improving it, please let us know.     </p> <p>The example below shows how to the heatmap showing the components of the pair-wise distance matrices.</p>"},{"location":"how-to-guides/charts/histogram/","title":"Histogram","text":"<p>This section showcases the histogram chart. It contains examples of how to create the histogram using the datachart.charts.Histogram function.</p> <p>The examples sequentially build on each other, going from simple to complex.</p> <p>As mentioned above, the histogram are created using the <code>Histogram</code> function found in the datachart.charts module. Let's import it:</p> In\u00a0[1]: Copied! <pre>from datachart.charts import Histogram\n</pre> from datachart.charts import Histogram <p>Double figure generation avoidence</p> <p>         To avoid double figure generation, the <code>Histogram</code> function is preceded by the <code>_ =</code> operator. The double figures are generated because <code>Histogram</code> returns the <code>plt.Figure</code> object, which is then used to save the figure locally.     </p> <p>For more details, see the datachart.typings.HistogramChartAttrs type.</p> In\u00a0[2]: Copied! <pre>import random\n</pre> import random <p>Basic example. Let us first create a basic histogram chart showing a random distribution.</p> <p>The following example shows how only the <code>charts[\"data\"]</code> attribute is required to draw the histgram chart.</p> In\u00a0[3]: Copied! <pre>NUM_OF_POINTS = 100\n</pre> NUM_OF_POINTS = 100 In\u00a0[4]: Copied! <pre>charts = {\"data\": {\"x\": [100 * idx * random.random() for idx in range(NUM_OF_POINTS)]}}\n</pre> charts = {\"data\": {\"x\": [100 * idx * random.random() for idx in range(NUM_OF_POINTS)]}} In\u00a0[5]: Copied! <pre>_ = Histogram(\n    {\n        # add the data to the chart\n        \"charts\": charts,\n    }\n)\n</pre> _ = Histogram(     {         # add the data to the chart         \"charts\": charts,     } ) In\u00a0[6]: Copied! <pre>_ = Histogram(\n    {\n        \"charts\": charts,\n        # add the title\n        \"title\": \"Title\",\n        # add the x and y axis labels\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n    }\n)\n</pre> _ = Histogram(     {         \"charts\": charts,         # add the title         \"title\": \"Title\",         # add the x and y axis labels         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",     } ) In\u00a0[7]: Copied! <pre>_ = Histogram(\n    {\n        \"charts\": charts,\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        # change the number of bins\n        \"num_bins\": 40,\n    }\n)\n</pre> _ = Histogram(     {         \"charts\": charts,         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         # change the number of bins         \"num_bins\": 40,     } ) In\u00a0[8]: Copied! <pre>from datachart.constants import FIG_SIZE, SHOW_GRID\n</pre> from datachart.constants import FIG_SIZE, SHOW_GRID In\u00a0[9]: Copied! <pre>_ = Histogram(\n    {\n        \"charts\": charts,\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        # add to determine the figure size\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        # add to show the grid lines\n        \"show_grid\": SHOW_GRID.Y,\n        \"num_bins\": 40,\n    }\n)\n</pre> _ = Histogram(     {         \"charts\": charts,         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         # add to determine the figure size         \"figsize\": FIG_SIZE.A4_NARROW,         # add to show the grid lines         \"show_grid\": SHOW_GRID.Y,         \"num_bins\": 40,     } ) In\u00a0[10]: Copied! <pre>from datachart.constants import HISTOGRAM_TYPE, HATCH_STYLE\n</pre> from datachart.constants import HISTOGRAM_TYPE, HATCH_STYLE In\u00a0[11]: Copied! <pre>_ = Histogram(\n    {\n        \"charts\": {\n            \"data\": charts[\"data\"],\n            # define the style of the histogram\n            \"style\": {\n                \"plot_hist_hatch\": HATCH_STYLE.DIAGONAL,\n                \"plot_hist_fill\": True,\n                \"plot_hist_edge_width\": 1,\n                \"plot_hist_edge_color\": \"#08519c\",\n                \"plot_hist_type\": HISTOGRAM_TYPE.STEP,\n            },\n        },\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": SHOW_GRID.Y,\n        \"num_bins\": 40,\n    }\n)\n</pre> _ = Histogram(     {         \"charts\": {             \"data\": charts[\"data\"],             # define the style of the histogram             \"style\": {                 \"plot_hist_hatch\": HATCH_STYLE.DIAGONAL,                 \"plot_hist_fill\": True,                 \"plot_hist_edge_width\": 1,                 \"plot_hist_edge_color\": \"#08519c\",                 \"plot_hist_type\": HISTOGRAM_TYPE.STEP,             },         },         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": SHOW_GRID.Y,         \"num_bins\": 40,     } ) In\u00a0[12]: Copied! <pre>from datachart.constants import ORIENTATION\n</pre> from datachart.constants import ORIENTATION In\u00a0[13]: Copied! <pre>_ = Histogram(\n    {\n        \"charts\": {\n            \"data\": charts[\"data\"],\n            \"style\": {\n                \"plot_hist_hatch\": HATCH_STYLE.DIAGONAL,\n                \"plot_hist_fill\": True,\n                \"plot_hist_edge_width\": 1,\n                \"plot_hist_edge_color\": \"#08519c\",\n                \"plot_hist_type\": HISTOGRAM_TYPE.STEP,\n            },\n        },\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        # change the grid to match the change in orientation\n        \"show_grid\": SHOW_GRID.X,\n        # change the orientation of the bars\n        \"orientation\": ORIENTATION.HORIZONTAL,\n        \"num_bins\": 40,\n    }\n)\n</pre> _ = Histogram(     {         \"charts\": {             \"data\": charts[\"data\"],             \"style\": {                 \"plot_hist_hatch\": HATCH_STYLE.DIAGONAL,                 \"plot_hist_fill\": True,                 \"plot_hist_edge_width\": 1,                 \"plot_hist_edge_color\": \"#08519c\",                 \"plot_hist_type\": HISTOGRAM_TYPE.STEP,             },         },         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         # change the grid to match the change in orientation         \"show_grid\": SHOW_GRID.X,         # change the orientation of the bars         \"orientation\": ORIENTATION.HORIZONTAL,         \"num_bins\": 40,     } ) <p>To add vertical and horizontal lines, simply add the <code>vlines</code> and <code>hlines</code> attributes into the input dictionary.</p> In\u00a0[14]: Copied! <pre>from datachart.constants import LINE_STYLE\n</pre> from datachart.constants import LINE_STYLE In\u00a0[15]: Copied! <pre>_ = Histogram(\n    {\n        \"charts\": {\n            \"data\": charts[\"data\"],\n            # add a list of vertical lines\n            \"vlines\": [\n                {\n                    \"x\": 2000 * i,\n                    \"style\": {\n                        \"plot_vline_color\": \"green\",\n                        \"plot_vline_style\": LINE_STYLE.SOLID,\n                        \"plot_vline_width\": 1,\n                    },\n                }\n                for i in range(1, 4)\n            ],\n            # add a list of horizontal lines\n            \"hlines\": {\n                \"y\": 6,\n                \"style\": {\n                    \"plot_hline_color\": \"red\",\n                    \"plot_hline_style\": LINE_STYLE.DASHED,\n                    \"plot_hline_width\": 2,\n                    \"plot_hline_alpha\": 0.5,\n                },\n            },\n        },\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": SHOW_GRID.Y,\n        \"num_bins\": 40,\n    }\n)\n</pre> _ = Histogram(     {         \"charts\": {             \"data\": charts[\"data\"],             # add a list of vertical lines             \"vlines\": [                 {                     \"x\": 2000 * i,                     \"style\": {                         \"plot_vline_color\": \"green\",                         \"plot_vline_style\": LINE_STYLE.SOLID,                         \"plot_vline_width\": 1,                     },                 }                 for i in range(1, 4)             ],             # add a list of horizontal lines             \"hlines\": {                 \"y\": 6,                 \"style\": {                     \"plot_hline_color\": \"red\",                     \"plot_hline_style\": LINE_STYLE.DASHED,                     \"plot_hline_width\": 2,                     \"plot_hline_alpha\": 0.5,                 },             },         },         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": SHOW_GRID.Y,         \"num_bins\": 40,     } ) In\u00a0[16]: Copied! <pre># the charts data is now a list of charts\ncharts = [\n    {\n        \"data\": {\"x\": [100 * idx * random.random() for idx in range(NUM_OF_POINTS)]},\n    }\n    for _ in range(2)\n]\n</pre> # the charts data is now a list of charts charts = [     {         \"data\": {\"x\": [100 * idx * random.random() for idx in range(NUM_OF_POINTS)]},     }     for _ in range(2) ] In\u00a0[17]: Copied! <pre>_ = Histogram(\n    {\n        # use a list of charts to define multiple histograms\n        \"charts\": charts,\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": SHOW_GRID.Y,\n        \"num_bins\": 40,\n    }\n)\n</pre> _ = Histogram(     {         # use a list of charts to define multiple histograms         \"charts\": charts,         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": SHOW_GRID.Y,         \"num_bins\": 40,     } ) In\u00a0[18]: Copied! <pre>charts = [\n    {\n        **chart,\n        # add a subtitle to the chart (see below for more info)\n        \"subtitle\": f\"Histogram {idx+1}\",\n    }\n    for idx, chart in enumerate(charts)\n]\n</pre> charts = [     {         **chart,         # add a subtitle to the chart (see below for more info)         \"subtitle\": f\"Histogram {idx+1}\",     }     for idx, chart in enumerate(charts) ] In\u00a0[19]: Copied! <pre>_ = Histogram(\n    {\n        \"charts\": charts,\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": SHOW_GRID.Y,\n        \"num_bins\": 40,\n        # show the legend\n        \"show_legend\": True,\n    }\n)\n</pre> _ = Histogram(     {         \"charts\": charts,         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": SHOW_GRID.Y,         \"num_bins\": 40,         # show the legend         \"show_legend\": True,     } ) In\u00a0[20]: Copied! <pre>_ = Histogram(\n    {\n        \"charts\": charts,\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": SHOW_GRID.Y,\n        \"num_bins\": 40,\n        # show each chart in its own subplot\n        \"subplots\": True,\n    }\n)\n</pre> _ = Histogram(     {         \"charts\": charts,         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": SHOW_GRID.Y,         \"num_bins\": 40,         # show each chart in its own subplot         \"subplots\": True,     } ) In\u00a0[21]: Copied! <pre>_ = Histogram(\n    {\n        \"charts\": charts,\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": SHOW_GRID.Y,\n        \"num_bins\": 40,\n        \"subplots\": True,\n        # share the x-axis across subplots\n        \"sharex\": True,\n        # share the y-axis across subplots\n        \"sharey\": True,\n    }\n)\n</pre> _ = Histogram(     {         \"charts\": charts,         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": SHOW_GRID.Y,         \"num_bins\": 40,         \"subplots\": True,         # share the x-axis across subplots         \"sharex\": True,         # share the y-axis across subplots         \"sharey\": True,     } ) In\u00a0[22]: Copied! <pre>_ = Histogram(\n    {\n        \"charts\": charts,\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"num_bins\": 40,\n        \"subplots\": True,\n        \"sharex\": True,\n        \"sharey\": True,\n        # change the grid to match the change in orientation\n        \"show_grid\": SHOW_GRID.X,\n        # change the orientation of the histogram\n        \"orientation\": ORIENTATION.HORIZONTAL,\n    }\n)\n</pre> _ = Histogram(     {         \"charts\": charts,         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"num_bins\": 40,         \"subplots\": True,         \"sharex\": True,         \"sharey\": True,         # change the grid to match the change in orientation         \"show_grid\": SHOW_GRID.X,         # change the orientation of the histogram         \"orientation\": ORIENTATION.HORIZONTAL,     } ) In\u00a0[23]: Copied! <pre>_ = Histogram(\n    {\n        \"charts\": charts,\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": SHOW_GRID.Y,\n        \"subplots\": True,\n        \"sharex\": True,\n        \"sharey\": True,\n        \"num_bins\": 40,\n        # shows the density of the data\n        \"show_density\": True,\n    }\n)\n</pre> _ = Histogram(     {         \"charts\": charts,         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": SHOW_GRID.Y,         \"subplots\": True,         \"sharex\": True,         \"sharey\": True,         \"num_bins\": 40,         # shows the density of the data         \"show_density\": True,     } ) In\u00a0[24]: Copied! <pre>_ = Histogram(\n    {\n        \"charts\": charts,\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": SHOW_GRID.Y,\n        \"subplots\": True,\n        \"sharex\": True,\n        \"sharey\": True,\n        \"num_bins\": 40,\n        # shows the cumulative distribution\n        \"show_cumulative\": True,\n    }\n)\n</pre> _ = Histogram(     {         \"charts\": charts,         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": SHOW_GRID.Y,         \"subplots\": True,         \"sharex\": True,         \"sharey\": True,         \"num_bins\": 40,         # shows the cumulative distribution         \"show_cumulative\": True,     } ) In\u00a0[25]: Copied! <pre>_ = Histogram(\n    {\n        \"charts\": charts,\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": SHOW_GRID.X,\n        \"subplots\": True,\n        \"sharex\": True,\n        \"sharey\": True,\n        \"num_bins\": 40,\n        # shows the density of the data\n        \"show_density\": True,\n        # shows the cumulative distribution\n        \"show_cumulative\": True,\n    }\n)\n</pre> _ = Histogram(     {         \"charts\": charts,         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": SHOW_GRID.X,         \"subplots\": True,         \"sharex\": True,         \"sharey\": True,         \"num_bins\": 40,         # shows the density of the data         \"show_density\": True,         # shows the cumulative distribution         \"show_cumulative\": True,     } ) In\u00a0[26]: Copied! <pre>from datachart.constants import SCALE\n</pre> from datachart.constants import SCALE <p>To showcase the supported scales, we iterate through all of the scales options.</p> In\u00a0[27]: Copied! <pre>for scale in [SCALE.LINEAR, SCALE.LOG, SCALE.SYMLOG, SCALE.ASINH]:\n    figure = Histogram(\n        {\n            \"charts\": charts,\n            \"title\": f\"Graph showcasing the '{scale}' scale\",\n            \"xlabel\": \"the global x-axis label\",\n            \"ylabel\": \"the global y-axis label\",\n            \"figsize\": FIG_SIZE.A4_NARROW,\n            \"show_grid\": SHOW_GRID.X,\n            \"subplots\": True,\n            \"sharex\": True,\n            \"sharey\": True,\n            \"num_bins\": 40,\n            # set the scale of the x and y axes\n            \"scaley\": scale,\n        }\n    )\n</pre> for scale in [SCALE.LINEAR, SCALE.LOG, SCALE.SYMLOG, SCALE.ASINH]:     figure = Histogram(         {             \"charts\": charts,             \"title\": f\"Graph showcasing the '{scale}' scale\",             \"xlabel\": \"the global x-axis label\",             \"ylabel\": \"the global y-axis label\",             \"figsize\": FIG_SIZE.A4_NARROW,             \"show_grid\": SHOW_GRID.X,             \"subplots\": True,             \"sharex\": True,             \"sharey\": True,             \"num_bins\": 40,             # set the scale of the x and y axes             \"scaley\": scale,         }     ) In\u00a0[28]: Copied! <pre>from datachart.utils import save_figure\n</pre> from datachart.utils import save_figure In\u00a0[29]: Copied! <pre>save_figure(figure, \"./fig_histogram.png\", dpi=300)\n</pre> save_figure(figure, \"./fig_histogram.png\", dpi=300) <p>The figure should be saved in the current working directory.</p>"},{"location":"how-to-guides/charts/histogram/#histogram","title":"Histogram\u00b6","text":""},{"location":"how-to-guides/charts/histogram/#histogram-input-attributes","title":"Histogram Input Attributes\u00b6","text":"<p>The <code>Histogram</code> function accepts the attributes of the datachart.typings.HistogramChartAttrs type. In a nutshell, the input is a <code>dict</code> object containing the <code>charts</code> attribute, which is either a <code>dict</code> or a <code>List[dict]</code> where each dictionary contains some of the following attributes:</p> <pre>{\n  \"data\": [{                                            # A list of histogram data points\n    \"x\":     Union[int, float],                         # The x-axis value\n  }],\n  \"style\": {                                            # The style of the histogram (optional)\n    \"plot_hist_color\":      Union[str, None],           # The color of the histogram\n    \"plot_hist_alpha\":      Union[float, None],         # The transparency of the histogram\n    \"plot_hist_zorder\":     Union[int, float, None],    # The z-order of the histogram\n    \"plot_hist_fill\":       Union[str, None],           # The fill color of the histogram\n    \"plot_hist_hatch\":      Union[HATCH_STYLE, None],   # The hatch pattern\n    \"plot_hist_type\":       Union[str, None],           # The type of the histogram\n    \"plot_hist_align\":      Union[str, None],           # The alignment of the histogram\n    \"plot_hist_edge_width\": Union[int, float, None],    # The width of the histogram edge\n    \"plot_hist_edge_color\": Union[str, None],           # The color of the histogram edge\n  },\n  \"subtitle\": Optional[str],                            # The title of the chart\n  \"xlabel\":   Optional[str],                            # The x-axis label\n  \"ylabel\":   Optional[str],                            # The y-axis label\n\n  \"xticks\": Optional[List[Union[int, float]]],          # the x-axis ticks\n  \"xticklabels\": Optional[List[Union[str, float, str]], # the x-axis tick labels (must be same length as xticks)\n  \"xtickrotate\": Optional[int],                         # the x-axis tick labels rotation\n  \"yticks\": Optional[List[Union[int, float]]],          # the y-axis ticks\n  \"yticklabels\": Optional[List[Union[str, float, str]], # the y-axis tick labels (must be same length as yticks)\n  \"ytickrotate\": Optional[int],                         # the y-axis tick labels rotation\n\n  \"vlines\": Optional[Union[dict, None]],                # the vertical lines\n  \"hlines\": Optional[Union[dict, None]],                # the horizontal lines\n}\n</pre>"},{"location":"how-to-guides/charts/histogram/#single-histogram-chart","title":"Single Histogram Chart\u00b6","text":"<p>In this part, we show how to create a single histogram chart using the <code>Histogram</code> function.</p> <p>Let us first import the necessary libraries:</p>"},{"location":"how-to-guides/charts/histogram/#chart-title-and-axis-labels","title":"Chart title and axis labels\u00b6","text":"<p>To add the chart title and axis labels, simply add the <code>title</code>, <code>xlabel</code> and <code>ylabel</code> attributes.</p>"},{"location":"how-to-guides/charts/histogram/#number-of-bins","title":"Number of bins\u00b6","text":"<p>The histogram bins the values into a number of bins. By default, the number of bins is 20.</p> <p>To change the number of bins, simply modify the <code>num_bins</code> attribute.</p>"},{"location":"how-to-guides/charts/histogram/#figure-size-and-grid","title":"Figure size and grid\u00b6","text":"<p>To change the figure size, simply add the <code>figsize</code> attribute. The <code>figsize</code> attribute can be a tuple (width, height), values are in inches. The <code>datachart</code> package provides a datachart.constants.FIG_SIZE constant, which contains some of the predefined figure sizes.</p> <p>To add the grid, simply add the <code>show_grid</code> attribute. The possible options are:</p> Option Description <code>\"both\"</code> shows both the x-axis and the y-axis gridlines. <code>\"x\"</code> shows only the x-axis grid lines. <code>\"y\"</code> shows only the y-axis grid lines. <p>Again, <code>datachart</code> provides a datachart.constants.SHOW_GRID constant, which contains the supported options.</p>"},{"location":"how-to-guides/charts/histogram/#histogram-style","title":"Histogram style\u00b6","text":"<p>To change a single histogram style simply add the <code>style</code> attribute with the corresponding attributes. The supported attributes are shown in the datachart.typings.HistStyleAttrs type, which contains the following attributes:</p> Attribute Description <code>\"plot_hist_color\"</code> The color of the histogram (hex color code). <code>\"plot_hist_alpha\"</code> The alpha of the histogram (how visible the histogram is). <code>\"plot_hist_zorder\"</code> The zorder of the histogram. <code>\"plot_hist_fill\"</code> The fill color of the histogram (hex color code). <code>\"plot_hist_hatch\"</code> The hatch pattern of the histogram. <code>\"plot_hist_type\"</code> The type of the histogram. <code>\"plot_hist_align\"</code> The alignment of the histogram. <code>\"plot_hist_edge_width\"</code> The width of the histogram edge. <code>\"plot_hist_edge_color\"</code> The color of the histogram edge (hex color code). <p>Again, to help with the style settings, the datachart.constants module contains the following constants:</p> Constant Description datachart.constants.HATCH_STYLE The hatch pattern of the histogram. datachart.constants.HISTOGRAM_TYPE The type of the histogram."},{"location":"how-to-guides/charts/histogram/#histogram-orientation","title":"Histogram orientation\u00b6","text":"<p>To change the orientation of the histograms, simply add the <code>orientation</code> attribute, which supports the following values:</p> Value Description <code>\"horizontal\"</code> The histogram are horizontal. <code>\"vertical\"</code> The histogram are vertical. <p>Again, to help with the style settings, the datachart.constants module contains the following constants:</p> Constant Description datachart.constants.ORIENTATION The orientation of the histogram."},{"location":"how-to-guides/charts/histogram/#adding-vertical-and-horizontal-lines","title":"Adding vertical and horizontal lines\u00b6","text":"<p>Adding vertical lines. Within the <code>charts</code> attribute, define the attribute <code>vlines</code> with the datachart.typings.VLinePlotAttrs typing, which is either a <code>dict</code> or a <code>List[dict]</code> where each dictionary contains some of the following attributes:</p> <pre>{\n  \"x\":    Union[int, float],                 # The x-axis value\n  \"ymin\": Optional[Union[int, float]],       # The minimum y-axis value\n  \"ymax\": Optional[Union[int, float]],       # The maximum y-axis value\n  \"style\": {                                 # The style of the line (optional)\n    \"plot_vline_color\": Optional[str],       # The color of the line (hex color code)\n    \"plot_vline_style\": Optional[LineStyle], # The line style (solid, dashed, etc.)\n    \"plot_vline_width\": Optional[float],     # The width of the line\n    \"plot_vline_alpha\": Optional[float],     # The alpha of the line (how visible the line is)\n  },\n  \"label\": Optional[str],                    # The label of the line\n}\n</pre> <p>Adding horizontal lines. Within the <code>charts</code> attribute, define the attribute <code>hlines</code>, with the datachart.typings.HLinePlotAttrs typing, which is either a <code>dict</code> or a <code>List[dict]</code> where each dictionary contains some of the following attributes:</p> <pre>{\n  \"y\":    Union[int, float],                 # The y-axis value\n  \"xmin\": Optional[Union[int, float]],       # The minimum x-axis value\n  \"xmax\": Optional[Union[int, float]],       # The maximum x-axis value\n  \"style\": {                                 # The style of the line (optional)\n    \"plot_hline_color\": Optional[str],       # The color of the line (hex color code)\n    \"plot_hline_style\": Optional[LineStyle], # The line style (solid, dashed, etc.)\n    \"plot_hline_width\": Optional[float],     # The width of the line\n    \"plot_hline_alpha\": Optional[float],     # The alpha of the line (how visible the line is)\n  },\n  \"label\": Optional[str],                    # The label of the line\n}\n</pre>"},{"location":"how-to-guides/charts/histogram/#multiple-histogram-charts","title":"Multiple Histogram Charts\u00b6","text":"<p>To add multiple histogram charts, simply add the <code>charts</code> attribute with a list of charts, as shown below.</p> <p>Attributes same as creating a single chart</p> <p>         We designed the <code>datachart.charts.*</code> functions to use the same attribute naming when possible. To create multiple charts, the <code>charts</code> attribute becomes a list of dictionaries with the same attributes as when creating a single chart.     </p>"},{"location":"how-to-guides/charts/histogram/#sub-chart-subtitles","title":"Sub-chart subtitles\u00b6","text":"<p>We can name each chart by adding the <code>subtitle</code> attribute to each chart. In addition, to help with discerning which chart is which, use the <code>show_legend</code> attribute to show the legend of the charts.</p>"},{"location":"how-to-guides/charts/histogram/#subplots","title":"Subplots\u00b6","text":"<p>To draw multiple charts in each subplot, simply add the <code>subplots</code> attribute. The chart's <code>subtitle</code> are then added at the top of each subplot, while the <code>title</code>, <code>xlabel</code> and <code>ylabel</code> are positioned to be global for all charts.</p>"},{"location":"how-to-guides/charts/histogram/#sharing-the-x-axis-andor-y-axis-across-subplots","title":"Sharing the x-axis and/or y-axis across subplots\u00b6","text":"<p>To share the x-axis and/or y-axis across subplots, simply add the <code>sharex</code> and/or <code>sharey</code> attributes, which are boolean values that specify whether to share the axis across all subplots.</p>"},{"location":"how-to-guides/charts/histogram/#subplot-orientation","title":"Subplot orientation\u00b6","text":"<p>The <code>orientation</code> attribute can be used to change the orientation of all subplots.</p>"},{"location":"how-to-guides/charts/histogram/#histogram-views","title":"Histogram Views\u00b6","text":""},{"location":"how-to-guides/charts/histogram/#density-distribution-view","title":"Density distribution view\u00b6","text":"<p>To show the histograms as a density distribution, simply add the <code>show_density</code> attribute. This will scale the histogram bars to represent the density of the data, instead of the frequency of the data. Thus, the y-axis (or x-axis in <code>horizontal</code> orientation) will be between 0 and 1.</p>"},{"location":"how-to-guides/charts/histogram/#cumulative-distribution-view","title":"Cumulative distribution view\u00b6","text":"<p>To show the histograms as a cumulative distribution, simply add the <code>show_cumulative</code> attribute. This will show the cumulative distribution of the data, i.e. the height of each bar will be the sum of the previous bars.</p>"},{"location":"how-to-guides/charts/histogram/#cumulative-density-distribution-view","title":"Cumulative &amp; density distribution view\u00b6","text":"<p>One can also combine the <code>show_density</code> and <code>show_cumulative</code> attributes. This will show the density of the data and the cumulative distribution of the data.</p>"},{"location":"how-to-guides/charts/histogram/#axis-scales","title":"Axis scales\u00b6","text":"<p>The user can change the axis scale using the <code>scalex</code> and <code>scaley</code> attributes. The supported scale options are:</p> Options Description <code>\"linear\"</code> The linear scale. <code>\"log\"</code> The log scale. <code>\"symlog\"</code> The symmetric log scale. <code>\"asinh\"</code> The asinh scale. <p>Again, to help with the options settings, the datachart.constants module contains the following constants:</p> Constant Description datachart.constants.SCALE The axis options."},{"location":"how-to-guides/charts/histogram/#saving-the-chart-as-an-image","title":"Saving the Chart as an Image\u00b6","text":"<p>To save the chart as an image, use the datachart.utils.save_figure function.</p>"},{"location":"how-to-guides/charts/linechart/","title":"Line Chart","text":"<p>This section showcases the line chart. It contains examples of how to create line charts using the datachart.charts.LineChart function.</p> <p>The examples sequentially build on each other, going from simple to more complex.</p> <p>As mentioned above, the line charts are created using the <code>LineChart</code> function found in the datachart.charts module. Let's import it:</p> In\u00a0[1]: Copied! <pre>from datachart.charts import LineChart\n</pre> from datachart.charts import LineChart <p>Double figure generation avoidence</p> <p>         To avoid double figure generation, the <code>LineChart</code> function is preceded by the <code>_ =</code> operator. The double figures are generated because <code>LineChart</code> returns the <code>plt.Figure</code> object, which is then used to save the figure locally.     </p> <p>For more details, see the datachart.typings.LineChartAttrs type.</p> <p>In this part, we show how to create a single line chart using the <code>LineChart</code> function.</p> <p>Let us first import the necessary libraries:</p> In\u00a0[2]: Copied! <pre>import numpy as np\n</pre> import numpy as np <p>Basic example. Let us first create a basic line chart showing the cosine function.</p> <p>The following example shows how only the <code>charts[\"data\"]</code> attribute is required to draw the line chart.</p> In\u00a0[3]: Copied! <pre>_ = LineChart(\n    {\n        # add the data to the chart\n        \"charts\": {\n            \"data\": [{\"x\": x / 10, \"y\": np.cos(x / 2)} for x in range(21)],\n        }\n    }\n)\n</pre> _ = LineChart(     {         # add the data to the chart         \"charts\": {             \"data\": [{\"x\": x / 10, \"y\": np.cos(x / 2)} for x in range(21)],         }     } ) In\u00a0[4]: Copied! <pre>_ = LineChart(\n    {\n        \"charts\": {\n            \"data\": [{\"x\": x / 10, \"y\": np.cos(x / 2)} for x in range(21)],\n        },\n        # add the title\n        \"title\": \"Title\",\n        # add the x and y axis labels\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n    }\n)\n</pre> _ = LineChart(     {         \"charts\": {             \"data\": [{\"x\": x / 10, \"y\": np.cos(x / 2)} for x in range(21)],         },         # add the title         \"title\": \"Title\",         # add the x and y axis labels         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",     } ) In\u00a0[5]: Copied! <pre>from datachart.constants import FIG_SIZE, SHOW_GRID\n</pre> from datachart.constants import FIG_SIZE, SHOW_GRID In\u00a0[6]: Copied! <pre>_ = LineChart(\n    {\n        \"charts\": {\n            \"data\": [{\"x\": x / 10, \"y\": np.cos(x / 2)} for x in range(21)],\n        },\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        # add to determine the figure size\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        # add to show the grid lines\n        \"show_grid\": SHOW_GRID.BOTH,\n    }\n)\n</pre> _ = LineChart(     {         \"charts\": {             \"data\": [{\"x\": x / 10, \"y\": np.cos(x / 2)} for x in range(21)],         },         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         # add to determine the figure size         \"figsize\": FIG_SIZE.A4_NARROW,         # add to show the grid lines         \"show_grid\": SHOW_GRID.BOTH,     } ) In\u00a0[7]: Copied! <pre>from datachart.constants import LINE_STYLE, LINE_MARKER, LINE_DRAW_STYLE\n</pre> from datachart.constants import LINE_STYLE, LINE_MARKER, LINE_DRAW_STYLE In\u00a0[8]: Copied! <pre>_ = LineChart(\n    {\n        \"charts\": {\n            \"data\": [{\"x\": x / 10, \"y\": np.cos(x / 2)} for x in range(21)],\n            # define the style of the line\n            \"style\": {\n                \"plot_line_style\": LINE_STYLE.DOTTED,\n                \"plot_line_marker\": LINE_MARKER.POINT,\n                \"plot_line_drawstyle\": LINE_DRAW_STYLE.STEPS_MID,\n            },\n        },\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": SHOW_GRID.BOTH,\n    }\n)\n</pre> _ = LineChart(     {         \"charts\": {             \"data\": [{\"x\": x / 10, \"y\": np.cos(x / 2)} for x in range(21)],             # define the style of the line             \"style\": {                 \"plot_line_style\": LINE_STYLE.DOTTED,                 \"plot_line_marker\": LINE_MARKER.POINT,                 \"plot_line_drawstyle\": LINE_DRAW_STYLE.STEPS_MID,             },         },         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": SHOW_GRID.BOTH,     } ) In\u00a0[9]: Copied! <pre>_ = LineChart(\n    {\n        \"charts\": {\n            \"data\": [{\"x\": x / 10, \"y\": np.cos(x / 2)} for x in range(21)],\n            \"style\": {\n                \"plot_line_style\": LINE_STYLE.DOTTED,\n                \"plot_line_marker\": LINE_MARKER.POINT,\n                \"plot_line_drawstyle\": LINE_DRAW_STYLE.STEPS_MID,\n            },\n        },\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": SHOW_GRID.BOTH,\n        # shows the area between the line and y=0\n        \"show_area\": True,\n    }\n)\n</pre> _ = LineChart(     {         \"charts\": {             \"data\": [{\"x\": x / 10, \"y\": np.cos(x / 2)} for x in range(21)],             \"style\": {                 \"plot_line_style\": LINE_STYLE.DOTTED,                 \"plot_line_marker\": LINE_MARKER.POINT,                 \"plot_line_drawstyle\": LINE_DRAW_STYLE.STEPS_MID,             },         },         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": SHOW_GRID.BOTH,         # shows the area between the line and y=0         \"show_area\": True,     } ) <p>Adding vertical lines. Within the <code>charts</code> attribute, define the attribute <code>vlines</code> with the datachart.typings.VLinePlotAttrs typing, which is either a <code>dict</code> or a <code>List[dict]</code> where each dictionary contains some of the following attributes:</p> <pre>{\n  \"x\":    Union[int, float],                  # The x-axis value\n  \"ymin\": Optional[Union[int, float]],        # The minimum y-axis value\n  \"ymax\": Optional[Union[int, float]],        # The maximum y-axis value\n  \"style\": {                                  # The style of the line (optional)\n    \"plot_vline_color\": Optional[str],        # The color of the line (hex color code)\n    \"plot_vline_style\": Optional[LINE_STYLE], # The line style (solid, dashed, etc.)\n    \"plot_vline_width\": Optional[float],      # The width of the line\n    \"plot_vline_alpha\": Optional[float],      # The alpha of the line (how visible the line is)\n  },\n  \"label\": Optional[str],                     # The label of the line\n}\n</pre> <p>Adding horizontal lines. Within the <code>charts</code> attribute, define the attribute <code>hlines</code>, with the datachart.typings.HLinePlotAttrs typing, which is either a <code>dict</code> or a <code>List[dict]</code> where each dictionary contains some of the following attributes:</p> <pre>{\n  \"y\":    Union[int, float],                  # The y-axis value\n  \"xmin\": Optional[Union[int, float]],        # The minimum x-axis value\n  \"xmax\": Optional[Union[int, float]],        # The maximum x-axis value\n  \"style\": {                                  # The style of the line (optional)\n    \"plot_hline_color\": Optional[str],        # The color of the line (hex color code)\n    \"plot_hline_style\": Optional[LINE_STYLE], # The line style (solid, dashed, etc.)\n    \"plot_hline_width\": Optional[float],      # The width of the line\n    \"plot_hline_alpha\": Optional[float],      # The alpha of the line (how visible the line is)\n  },\n  \"label\": Optional[str],                     # The label of the line\n}\n</pre> <p>To add vertical and horizontal lines, simply add the <code>vlines</code> and <code>hlines</code> attributes into the input dictionary.</p> In\u00a0[10]: Copied! <pre>_ = LineChart(\n    {\n        \"charts\": {\n            \"data\": [{\"x\": x / 10, \"y\": np.cos(x / 2)} for x in range(21)],\n            \"style\": {\n                \"plot_line_style\": LINE_STYLE.DOTTED,\n                \"plot_line_marker\": LINE_MARKER.POINT,\n                \"plot_line_drawstyle\": LINE_DRAW_STYLE.STEPS_MID,\n            },\n            # add a list of vertical lines\n            \"vlines\": [\n                {\n                    \"x\": 0.5 * i,\n                    \"style\": {\n                        \"plot_vline_color\": \"green\",\n                        \"plot_vline_style\": LINE_STYLE.SOLID,\n                        \"plot_vline_width\": 1,\n                    },\n                }\n                for i in range(1, 4)\n            ],\n            # add a list of horizontal lines\n            \"hlines\": {\n                \"y\": 0,\n                \"style\": {\n                    \"plot_hline_color\": \"red\",\n                    \"plot_hline_style\": LINE_STYLE.DASHED,\n                    \"plot_hline_width\": 2,\n                    \"plot_hline_alpha\": 0.5,\n                },\n            },\n        },\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": SHOW_GRID.BOTH,\n    }\n)\n</pre> _ = LineChart(     {         \"charts\": {             \"data\": [{\"x\": x / 10, \"y\": np.cos(x / 2)} for x in range(21)],             \"style\": {                 \"plot_line_style\": LINE_STYLE.DOTTED,                 \"plot_line_marker\": LINE_MARKER.POINT,                 \"plot_line_drawstyle\": LINE_DRAW_STYLE.STEPS_MID,             },             # add a list of vertical lines             \"vlines\": [                 {                     \"x\": 0.5 * i,                     \"style\": {                         \"plot_vline_color\": \"green\",                         \"plot_vline_style\": LINE_STYLE.SOLID,                         \"plot_vline_width\": 1,                     },                 }                 for i in range(1, 4)             ],             # add a list of horizontal lines             \"hlines\": {                 \"y\": 0,                 \"style\": {                     \"plot_hline_color\": \"red\",                     \"plot_hline_style\": LINE_STYLE.DASHED,                     \"plot_hline_width\": 2,                     \"plot_hline_alpha\": 0.5,                 },             },         },         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": SHOW_GRID.BOTH,     } ) In\u00a0[11]: Copied! <pre>_ = LineChart(\n    {\n        # use a list of charts to define multiple lines\n        \"charts\": [\n            {\n                \"data\": [{\"x\": x / 10, \"y\": np.cos(x / 2)} for x in range(21)],\n                \"style\": {\n                    \"plot_line_style\": LINE_STYLE.DOTTED,\n                    \"plot_line_marker\": LINE_MARKER.POINT,\n                    \"plot_line_drawstyle\": LINE_DRAW_STYLE.STEPS_MID,\n                },\n            },\n            {\n                \"data\": [{\"x\": x / 10, \"y\": 2 * np.sin(x / 2)} for x in range(21)],\n            },\n        ],\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": SHOW_GRID.BOTH,\n    }\n)\n</pre> _ = LineChart(     {         # use a list of charts to define multiple lines         \"charts\": [             {                 \"data\": [{\"x\": x / 10, \"y\": np.cos(x / 2)} for x in range(21)],                 \"style\": {                     \"plot_line_style\": LINE_STYLE.DOTTED,                     \"plot_line_marker\": LINE_MARKER.POINT,                     \"plot_line_drawstyle\": LINE_DRAW_STYLE.STEPS_MID,                 },             },             {                 \"data\": [{\"x\": x / 10, \"y\": 2 * np.sin(x / 2)} for x in range(21)],             },         ],         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": SHOW_GRID.BOTH,     } ) In\u00a0[12]: Copied! <pre>_ = LineChart(\n    {\n        \"charts\": [\n            {\n                \"data\": [{\"x\": x / 10, \"y\": np.cos(x / 2)} for x in range(21)],\n                \"style\": {\n                    \"plot_line_style\": LINE_STYLE.DOTTED,\n                    \"plot_line_marker\": LINE_MARKER.POINT,\n                    \"plot_line_drawstyle\": LINE_DRAW_STYLE.STEPS_MID,\n                },\n                # add a subtitle to the line\n                \"subtitle\": \"cosine\",\n            },\n            {\n                \"data\": [{\"x\": x / 10, \"y\": 2 * np.sin(x / 2)} for x in range(21)],\n                # add a subtitle to the line\n                \"subtitle\": \"sine\",\n            },\n        ],\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": SHOW_GRID.BOTH,\n        # show the legend\n        \"show_legend\": True,\n    }\n)\n</pre> _ = LineChart(     {         \"charts\": [             {                 \"data\": [{\"x\": x / 10, \"y\": np.cos(x / 2)} for x in range(21)],                 \"style\": {                     \"plot_line_style\": LINE_STYLE.DOTTED,                     \"plot_line_marker\": LINE_MARKER.POINT,                     \"plot_line_drawstyle\": LINE_DRAW_STYLE.STEPS_MID,                 },                 # add a subtitle to the line                 \"subtitle\": \"cosine\",             },             {                 \"data\": [{\"x\": x / 10, \"y\": 2 * np.sin(x / 2)} for x in range(21)],                 # add a subtitle to the line                 \"subtitle\": \"sine\",             },         ],         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": SHOW_GRID.BOTH,         # show the legend         \"show_legend\": True,     } ) In\u00a0[13]: Copied! <pre>_ = LineChart(\n    {\n        \"charts\": [\n            {\n                \"data\": [{\"x\": x / 10, \"y\": np.cos(x / 2)} for x in range(21)],\n                \"style\": {\n                    \"plot_line_style\": LINE_STYLE.DOTTED,\n                    \"plot_line_marker\": LINE_MARKER.POINT,\n                    \"plot_line_drawstyle\": LINE_DRAW_STYLE.STEPS_MID,\n                },\n                \"subtitle\": \"cosine\",\n            },\n            {\n                \"data\": [{\"x\": x / 10, \"y\": 2 * np.sin(x / 2)} for x in range(21)],\n                \"subtitle\": \"sine\",\n            },\n        ],\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": SHOW_GRID.BOTH,\n        # show each chart in its own subplot\n        \"subplots\": True,\n    }\n)\n</pre> _ = LineChart(     {         \"charts\": [             {                 \"data\": [{\"x\": x / 10, \"y\": np.cos(x / 2)} for x in range(21)],                 \"style\": {                     \"plot_line_style\": LINE_STYLE.DOTTED,                     \"plot_line_marker\": LINE_MARKER.POINT,                     \"plot_line_drawstyle\": LINE_DRAW_STYLE.STEPS_MID,                 },                 \"subtitle\": \"cosine\",             },             {                 \"data\": [{\"x\": x / 10, \"y\": 2 * np.sin(x / 2)} for x in range(21)],                 \"subtitle\": \"sine\",             },         ],         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": SHOW_GRID.BOTH,         # show each chart in its own subplot         \"subplots\": True,     } ) In\u00a0[14]: Copied! <pre>_ = LineChart(\n    {\n        \"charts\": [\n            {\n                \"data\": [{\"x\": x / 10, \"y\": np.cos(x / 2)} for x in range(21)],\n                \"style\": {\n                    \"plot_line_style\": LINE_STYLE.DOTTED,\n                    \"plot_line_marker\": LINE_MARKER.POINT,\n                    \"plot_line_drawstyle\": LINE_DRAW_STYLE.STEPS_MID,\n                },\n                \"subtitle\": \"cosine\",\n            },\n            {\n                \"data\": [{\"x\": x / 10, \"y\": 2 * np.sin(x / 2)} for x in range(21)],\n                \"subtitle\": \"sine\",\n            },\n        ],\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": SHOW_GRID.BOTH,\n        \"subplots\": True,\n        # share the x-axis across all subplots\n        \"sharex\": True,\n        # share the y-axis across all subplots\n        \"sharey\": True,\n    }\n)\n</pre> _ = LineChart(     {         \"charts\": [             {                 \"data\": [{\"x\": x / 10, \"y\": np.cos(x / 2)} for x in range(21)],                 \"style\": {                     \"plot_line_style\": LINE_STYLE.DOTTED,                     \"plot_line_marker\": LINE_MARKER.POINT,                     \"plot_line_drawstyle\": LINE_DRAW_STYLE.STEPS_MID,                 },                 \"subtitle\": \"cosine\",             },             {                 \"data\": [{\"x\": x / 10, \"y\": 2 * np.sin(x / 2)} for x in range(21)],                 \"subtitle\": \"sine\",             },         ],         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": SHOW_GRID.BOTH,         \"subplots\": True,         # share the x-axis across all subplots         \"sharex\": True,         # share the y-axis across all subplots         \"sharey\": True,     } ) In\u00a0[15]: Copied! <pre>_ = LineChart(\n    {\n        \"charts\": [\n            {\n                \"data\": [{\"x\": x / 10, \"y\": np.cos(x / 2)} for x in range(21)],\n                \"style\": {\n                    \"plot_line_style\": LINE_STYLE.DOTTED,\n                    \"plot_line_marker\": LINE_MARKER.POINT,\n                    \"plot_line_drawstyle\": LINE_DRAW_STYLE.STEPS_MID,\n                },\n                \"subtitle\": \"cosine\",\n            },\n            {\n                \"data\": [{\"x\": x / 10, \"y\": 2 * np.sin(x / 2)} for x in range(21)],\n                \"subtitle\": \"sine\",\n            },\n        ],\n        \"title\": \"Title\",\n        \"xlabel\": \"the global x-axis label\",\n        \"ylabel\": \"the global y-axis label\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": SHOW_GRID.BOTH,\n        \"subplots\": True,\n        \"sharex\": True,\n        \"sharey\": True,\n        # show area between the line and y=0 for all subplots\n        \"show_area\": True,\n    }\n)\n</pre> _ = LineChart(     {         \"charts\": [             {                 \"data\": [{\"x\": x / 10, \"y\": np.cos(x / 2)} for x in range(21)],                 \"style\": {                     \"plot_line_style\": LINE_STYLE.DOTTED,                     \"plot_line_marker\": LINE_MARKER.POINT,                     \"plot_line_drawstyle\": LINE_DRAW_STYLE.STEPS_MID,                 },                 \"subtitle\": \"cosine\",             },             {                 \"data\": [{\"x\": x / 10, \"y\": 2 * np.sin(x / 2)} for x in range(21)],                 \"subtitle\": \"sine\",             },         ],         \"title\": \"Title\",         \"xlabel\": \"the global x-axis label\",         \"ylabel\": \"the global y-axis label\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": SHOW_GRID.BOTH,         \"subplots\": True,         \"sharex\": True,         \"sharey\": True,         # show area between the line and y=0 for all subplots         \"show_area\": True,     } ) In\u00a0[16]: Copied! <pre>import random\n</pre> import random In\u00a0[17]: Copied! <pre>_ = LineChart(\n    {\n        \"charts\": [\n            {\n                \"data\": [\n                    # add the error values for each point's y value\n                    {\"x\": x / 10, \"y\": np.cos(x / 2), \"yerr\": 0.1 + random.random()}\n                    for x in range(21)\n                ],\n                \"style\": {\n                    \"plot_line_style\": LINE_STYLE.DOTTED,\n                    \"plot_line_marker\": LINE_MARKER.POINT,\n                    \"plot_line_drawstyle\": LINE_DRAW_STYLE.STEPS_MID,\n                },\n                \"subtitle\": \"Subtitle\",\n                # add local subplot x-axis label\n                \"xlabel\": \"The local x-axis label\",\n                # add local subplot y-axis label\n                \"ylabel\": \"The local y-axis label\",\n            },\n            {\n                \"data\": [\n                    # note: not all lines require to have the error values\n                    {\"x\": x / 10, \"y\": 2 * np.sin(x / 2)}\n                    for x in range(21)\n                ],\n                \"subtitle\": \"Subtitle\",\n                # add local subplot x-axis label\n                \"xlabel\": \"The local x-axis label\",\n                # add local subplot y-axis label\n                \"ylabel\": \"The local y-axis label\",\n            },\n        ],\n        \"title\": \"Title\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": SHOW_GRID.BOTH,\n        \"subplots\": True,\n        \"sharex\": True,\n        \"sharey\": True,\n        # show the confidence interval using the error values\n        \"show_yerr\": True,\n    }\n)\n</pre> _ = LineChart(     {         \"charts\": [             {                 \"data\": [                     # add the error values for each point's y value                     {\"x\": x / 10, \"y\": np.cos(x / 2), \"yerr\": 0.1 + random.random()}                     for x in range(21)                 ],                 \"style\": {                     \"plot_line_style\": LINE_STYLE.DOTTED,                     \"plot_line_marker\": LINE_MARKER.POINT,                     \"plot_line_drawstyle\": LINE_DRAW_STYLE.STEPS_MID,                 },                 \"subtitle\": \"Subtitle\",                 # add local subplot x-axis label                 \"xlabel\": \"The local x-axis label\",                 # add local subplot y-axis label                 \"ylabel\": \"The local y-axis label\",             },             {                 \"data\": [                     # note: not all lines require to have the error values                     {\"x\": x / 10, \"y\": 2 * np.sin(x / 2)}                     for x in range(21)                 ],                 \"subtitle\": \"Subtitle\",                 # add local subplot x-axis label                 \"xlabel\": \"The local x-axis label\",                 # add local subplot y-axis label                 \"ylabel\": \"The local y-axis label\",             },         ],         \"title\": \"Title\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": SHOW_GRID.BOTH,         \"subplots\": True,         \"sharex\": True,         \"sharey\": True,         # show the confidence interval using the error values         \"show_yerr\": True,     } ) In\u00a0[18]: Copied! <pre>from datachart.constants import SCALE\n</pre> from datachart.constants import SCALE <p>To showcase the supported scales, we iterate through all of the scales options.</p> In\u00a0[19]: Copied! <pre>charts = {\n    \"data\": [{\"x\": x / 10, \"y\": 1 + np.cos(x / 2)} for x in range(1, 21)],\n}\n</pre> charts = {     \"data\": [{\"x\": x / 10, \"y\": 1 + np.cos(x / 2)} for x in range(1, 21)], } In\u00a0[20]: Copied! <pre>for scale in [SCALE.LINEAR, SCALE.LOG, SCALE.SYMLOG, SCALE.ASINH]:\n    figure = LineChart(\n        {\n            \"charts\": charts,\n            \"title\": f\"Graph showcasing the '{scale}' scale\",\n            \"xlabel\": \"the global x-axis label\",\n            \"ylabel\": \"the global y-axis label\",\n            \"figsize\": FIG_SIZE.A4_NARROW,\n            \"show_grid\": SHOW_GRID.BOTH,\n            # set the scale of the x and y axes\n            \"scalex\": scale,\n            \"scaley\": scale,\n        }\n    )\n</pre> for scale in [SCALE.LINEAR, SCALE.LOG, SCALE.SYMLOG, SCALE.ASINH]:     figure = LineChart(         {             \"charts\": charts,             \"title\": f\"Graph showcasing the '{scale}' scale\",             \"xlabel\": \"the global x-axis label\",             \"ylabel\": \"the global y-axis label\",             \"figsize\": FIG_SIZE.A4_NARROW,             \"show_grid\": SHOW_GRID.BOTH,             # set the scale of the x and y axes             \"scalex\": scale,             \"scaley\": scale,         }     ) In\u00a0[21]: Copied! <pre>from datachart.utils import save_figure\n</pre> from datachart.utils import save_figure In\u00a0[22]: Copied! <pre>save_figure(figure, \"./fig_line_chart.png\", dpi=300)\n</pre> save_figure(figure, \"./fig_line_chart.png\", dpi=300) <p>The figure should be saved in the current working directory.</p> In\u00a0[23]: Copied! <pre>from datachart.constants import HATCH_STYLE\n</pre> from datachart.constants import HATCH_STYLE In\u00a0[24]: Copied! <pre>_ = LineChart(\n    {\n        \"charts\": [\n            {\n                \"data\": [\n                    # note that the attributes are \"tp\" and \"fp\", instead of \"x\" and \"y\"\n                    {\"tp\": 0, \"fp\": 0},\n                    {\"tp\": 0.1, \"fp\": 0},\n                    {\"tp\": 0.1, \"fp\": 0.1},\n                    {\"tp\": 0.3, \"fp\": 0.1},\n                    {\"tp\": 0.3, \"fp\": 0.2},\n                    {\"tp\": 0.5, \"fp\": 0.2},\n                    {\"tp\": 0.5, \"fp\": 0.3},\n                    {\"tp\": 0.8, \"fp\": 0.3},\n                    {\"tp\": 0.8, \"fp\": 0.5},\n                    {\"tp\": 1.0, \"fp\": 0.5},\n                    {\"tp\": 1.0, \"fp\": 1.0},\n                ],\n                \"subtitle\": \"Method 1\",\n                # specify which attr to use for x\n                \"x\": \"fp\",\n                # specify which attr to use for y\n                \"y\": \"tp\",\n                \"style\": {\n                    \"plot_area_hatch\": HATCH_STYLE.DIAGONAL,\n                },\n            },\n            {\n                \"data\": [\n                    # note that the attributes are \"tp\" and \"fp\", instead of \"x\" and \"y\"\n                    {\"tp\": 0, \"fp\": 0},\n                    {\"tp\": 0.2, \"fp\": 0},\n                    {\"tp\": 0.2, \"fp\": 0.05},\n                    {\"tp\": 0.8, \"fp\": 0.05},\n                    {\"tp\": 0.8, \"fp\": 0.1},\n                    {\"tp\": 1.0, \"fp\": 0.1},\n                    {\"tp\": 1.0, \"fp\": 1.0},\n                ],\n                \"subtitle\": \"Method 2\",\n                # specify which attr to use for x\n                \"x\": \"fp\",\n                # specify which attr to use for y\n                \"y\": \"tp\",\n                \"style\": {\n                    \"plot_area_hatch\": HATCH_STYLE.DIAGONAL,\n                },\n            },\n        ],\n        \"title\": \"AUC\",\n        \"xlabel\": \"False Positive Rate\",\n        \"ylabel\": \"True Positive Rate\",\n        \"figsize\": (5, 2.8),\n        \"show_grid\": SHOW_GRID.BOTH,\n        \"xmin\": 0,  # the minimum value of the x-axis\n        \"xmax\": 1,  # the maximum value of the x-axis\n        \"ymin\": 0,  # the minimum value of the y-axis\n        \"ymax\": 1,  # the maximum value of the y-axis\n        \"show_area\": True,\n        \"subplots\": True,\n        \"sharex\": True,\n        \"sharey\": True,\n        # assign the aspect ratio of all subplots\n        \"aspect_ratio\": \"equal\",\n    }\n)\n</pre> _ = LineChart(     {         \"charts\": [             {                 \"data\": [                     # note that the attributes are \"tp\" and \"fp\", instead of \"x\" and \"y\"                     {\"tp\": 0, \"fp\": 0},                     {\"tp\": 0.1, \"fp\": 0},                     {\"tp\": 0.1, \"fp\": 0.1},                     {\"tp\": 0.3, \"fp\": 0.1},                     {\"tp\": 0.3, \"fp\": 0.2},                     {\"tp\": 0.5, \"fp\": 0.2},                     {\"tp\": 0.5, \"fp\": 0.3},                     {\"tp\": 0.8, \"fp\": 0.3},                     {\"tp\": 0.8, \"fp\": 0.5},                     {\"tp\": 1.0, \"fp\": 0.5},                     {\"tp\": 1.0, \"fp\": 1.0},                 ],                 \"subtitle\": \"Method 1\",                 # specify which attr to use for x                 \"x\": \"fp\",                 # specify which attr to use for y                 \"y\": \"tp\",                 \"style\": {                     \"plot_area_hatch\": HATCH_STYLE.DIAGONAL,                 },             },             {                 \"data\": [                     # note that the attributes are \"tp\" and \"fp\", instead of \"x\" and \"y\"                     {\"tp\": 0, \"fp\": 0},                     {\"tp\": 0.2, \"fp\": 0},                     {\"tp\": 0.2, \"fp\": 0.05},                     {\"tp\": 0.8, \"fp\": 0.05},                     {\"tp\": 0.8, \"fp\": 0.1},                     {\"tp\": 1.0, \"fp\": 0.1},                     {\"tp\": 1.0, \"fp\": 1.0},                 ],                 \"subtitle\": \"Method 2\",                 # specify which attr to use for x                 \"x\": \"fp\",                 # specify which attr to use for y                 \"y\": \"tp\",                 \"style\": {                     \"plot_area_hatch\": HATCH_STYLE.DIAGONAL,                 },             },         ],         \"title\": \"AUC\",         \"xlabel\": \"False Positive Rate\",         \"ylabel\": \"True Positive Rate\",         \"figsize\": (5, 2.8),         \"show_grid\": SHOW_GRID.BOTH,         \"xmin\": 0,  # the minimum value of the x-axis         \"xmax\": 1,  # the maximum value of the x-axis         \"ymin\": 0,  # the minimum value of the y-axis         \"ymax\": 1,  # the maximum value of the y-axis         \"show_area\": True,         \"subplots\": True,         \"sharex\": True,         \"sharey\": True,         # assign the aspect ratio of all subplots         \"aspect_ratio\": \"equal\",     } ) <p>Let us first update the global config:</p> In\u00a0[25]: Copied! <pre>from datachart.constants import COLORS\nfrom datachart.config import config\n</pre> from datachart.constants import COLORS from datachart.config import config In\u00a0[26]: Copied! <pre>config.update_config(config={\"color_general_multiple\": COLORS.MixedDark})\n</pre> config.update_config(config={\"color_general_multiple\": COLORS.MixedDark}) In\u00a0[27]: Copied! <pre>_ = LineChart(\n    {\n        \"charts\": [\n            {\n                \"data\": [\n                    # note that the attributes are \"step\" and \"loss\", instead of \"x\" and \"y\"\n                    {\"step\": step, \"loss\": (0.5 + random.random()) ** step}\n                    for step in range(100)\n                ],\n                # specify which attr to use for x\n                \"x\": \"step\",\n                # specify which attr to use for y\n                \"y\": \"loss\",\n                \"subtitle\": \"Method 1\",\n            },\n            {\n                \"data\": [\n                    # note that the attributes are \"step\" and \"loss\", instead of \"x\" and \"y\"\n                    {\"step\": step, \"loss\": (0.3 + random.random()) ** step}\n                    for step in range(100)\n                ],\n                # specify which attr to use for x\n                \"x\": \"step\",\n                # specify which attr to use for y\n                \"y\": \"loss\",\n                \"subtitle\": \"Method 2\",\n            },\n            {\n                \"data\": [\n                    {\"step\": step, \"loss\": (0.2 + random.random()) ** step}\n                    for step in range(100)\n                ],\n                # specify which attr to use for x\n                \"x\": \"step\",\n                # specify which attr to use for y\n                \"y\": \"loss\",\n                \"subtitle\": \"Method 3\",\n            },\n        ],\n        \"title\": \"Training Performance\",\n        \"xlabel\": \"training steps\",\n        \"ylabel\": \"training loss\",\n        \"figsize\": FIG_SIZE.A4_NARROW,\n        \"show_grid\": SHOW_GRID.Y,\n        \"show_legend\": True,\n        # depict the y-axis as a log scale\n        \"scaley\": \"log\",\n        \"subplots\": False,\n    }\n)\n</pre> _ = LineChart(     {         \"charts\": [             {                 \"data\": [                     # note that the attributes are \"step\" and \"loss\", instead of \"x\" and \"y\"                     {\"step\": step, \"loss\": (0.5 + random.random()) ** step}                     for step in range(100)                 ],                 # specify which attr to use for x                 \"x\": \"step\",                 # specify which attr to use for y                 \"y\": \"loss\",                 \"subtitle\": \"Method 1\",             },             {                 \"data\": [                     # note that the attributes are \"step\" and \"loss\", instead of \"x\" and \"y\"                     {\"step\": step, \"loss\": (0.3 + random.random()) ** step}                     for step in range(100)                 ],                 # specify which attr to use for x                 \"x\": \"step\",                 # specify which attr to use for y                 \"y\": \"loss\",                 \"subtitle\": \"Method 2\",             },             {                 \"data\": [                     {\"step\": step, \"loss\": (0.2 + random.random()) ** step}                     for step in range(100)                 ],                 # specify which attr to use for x                 \"x\": \"step\",                 # specify which attr to use for y                 \"y\": \"loss\",                 \"subtitle\": \"Method 3\",             },         ],         \"title\": \"Training Performance\",         \"xlabel\": \"training steps\",         \"ylabel\": \"training loss\",         \"figsize\": FIG_SIZE.A4_NARROW,         \"show_grid\": SHOW_GRID.Y,         \"show_legend\": True,         # depict the y-axis as a log scale         \"scaley\": \"log\",         \"subplots\": False,     } )"},{"location":"how-to-guides/charts/linechart/#line-chart","title":"Line Chart\u00b6","text":""},{"location":"how-to-guides/charts/linechart/#line-chart-input-attributes","title":"Line Chart Input Attributes\u00b6","text":"<p>The <code>LineChart</code> function accepts the attributes of the datachart.typings.LineChartAttrs type. In a nutshell, the input is a <code>dict</code> object containing the <code>charts</code> attribute, which is either a <code>dict</code> or a <code>List[dict]</code> where each dictionary contains some of the following attributes:</p> <pre>{\n  \"data\": [{                                            # A list of line data points\n    \"x\":    Union[int, float],                          # The x-axis value\n    \"y\":    Union[int, float],                          # The y-axis value\n    \"yerr\": Optional[Union[int, float]]                 # The y-axis error value (to plot the confidence interval)\n  }],\n  \"style\": {                                            # The style of the line (optional)\n    \"plot_line_color\":     Optional[str],               # The color of the line (hex color code)\n    \"plot_line_style\":     Optional[LINE_STYLE],        # The line style (solid, dashed, etc.)\n    \"plot_line_marker\":    Optional[LINE_MARKER],       # The marker style of the line (circle, square, etc.)\n    \"plot_line_width\":     Optional[float],             # The width of the line\n    \"plot_line_alpha\":     Optional[float],             # The alpha of the line (how visible the line is)\n    \"plot_line_drawstyle\": Optional[LINE_DRAW_STYLE],   # The drawstyle of the line (step, steps-mid, etc.)\n    \"plot_line_zorder\":    Optional[int],               # The zorder of the line\n  },\n  \"subtitle\": Optional[str],                            # The title of the chart\n  \"xlabel\":   Optional[str],                            # The x-axis label\n  \"ylabel\":   Optional[str],                            # The y-axis label\n\n  \"xticks\": Optional[List[Union[int, float]]],          # the x-axis ticks\n  \"xticklabels\": Optional[List[Union[str, float, str]], # the x-axis tick labels (must be same length as xticks)\n  \"xtickrotate\": Optional[int],                         # the x-axis tick labels rotation\n  \"yticks\": Optional[List[Union[int, float]]],          # the y-axis ticks\n  \"yticklabels\": Optional[List[Union[str, float, str]], # the y-axis tick labels (must be same length as yticks)\n  \"ytickrotate\": Optional[int],                         # the y-axis tick labels rotation\n\n  \"vlines\": Optional[Union[dict, None]],                # the vertical lines (see below for more details)\n  \"hlines\": Optional[Union[dict, None]],                # the horizontal lines (see below for more details)\n}\n</pre>"},{"location":"how-to-guides/charts/linechart/#single-line-chart","title":"Single Line Chart\u00b6","text":""},{"location":"how-to-guides/charts/linechart/#chart-title-and-axis-labels","title":"Chart title and axis labels\u00b6","text":"<p>To add the chart title and axis labels, simply add the <code>title</code>, <code>xlabel</code> and <code>ylabel</code> attributes.</p>"},{"location":"how-to-guides/charts/linechart/#figure-size-and-grid","title":"Figure size and grid\u00b6","text":"<p>To change the figure size, simply add the <code>figsize</code> attribute. The <code>figsize</code> attribute can be a tuple (width, height), values are in inches. The <code>datachart</code> package provides a datachart.constants.FIG_SIZE constant, which contains some of the predefined figure sizes.</p> <p>To add the grid, simply add the <code>show_grid</code> attribute. The possible options are:</p> Option Description <code>\"both\"</code> shows both the x-axis and the y-axis gridlines. <code>\"x\"</code> shows only the x-axis grid lines. <code>\"y\"</code> shows only the y-axis grid lines. <p>Again, <code>datachart</code> provides a datachart.constants.SHOW_GRID constant, which contains the supported options.</p>"},{"location":"how-to-guides/charts/linechart/#line-style","title":"Line style\u00b6","text":"<p>To change a single line style simply add the <code>style</code> attribute with the corresponding attributes. The supported attributes are shown in the datachart.typings.LineStyleAttrs type, which contains the following attributes:</p> Attribute Description <code>\"plot_line_color\"</code> The color of the line (hex color code). <code>\"plot_line_alpha\"</code> The alpha of the line (how visible the line is). <code>\"plot_line_width\"</code> The width of the line. <code>\"plot_line_style\"</code> The line style (solid, dashed, etc.). <code>\"plot_line_marker\"</code> The marker style of the line (circle, square, etc.). <code>\"plot_line_drawstyle\"</code> The drawstyle of the line (step, steps-mid, etc.). <code>\"plot_line_zorder\"</code> The zorder of the line. <p>Again, to help with the style settings, the datachart.constants module contains the following constants:</p> Constant Description datachart.constants.LINE_STYLE The line style (solid, dashed, etc.) datachart.constants.LINE_MARKER The marker style of the line (circle, square, etc.) datachart.constants.LINE_DRAW_STYLE The drawstyle of the line (step, steps-mid, etc.)"},{"location":"how-to-guides/charts/linechart/#area-under-the-line","title":"Area under the line\u00b6","text":"<p>To add the area under the line, simply add the <code>show_area</code> attribute into the input dictionary.</p>"},{"location":"how-to-guides/charts/linechart/#adding-vertical-and-horizontal-lines","title":"Adding vertical and horizontal lines\u00b6","text":""},{"location":"how-to-guides/charts/linechart/#multiple-line-charts","title":"Multiple Line Charts\u00b6","text":"<p>To add multiple line charts, simply add the <code>charts</code> attribute with a list of charts, as shown below.</p> <p>Attributes same as creating a single chart</p> <p>         We designed the <code>datachart.charts.*</code> functions to use the same attribute naming when possible. To create multiple charts, the <code>charts</code> attribute becomes a list of dictionaries with the same attributes as when creating a single chart.     </p>"},{"location":"how-to-guides/charts/linechart/#sub-chart-subtitles","title":"Sub-chart subtitles\u00b6","text":"<p>We can name each chart by adding the <code>subtitle</code> attribute to each chart. In addition, to help with discerning which chart is which, use the <code>show_legend</code> attribute to show the legend of the charts.</p>"},{"location":"how-to-guides/charts/linechart/#subplots","title":"Subplots\u00b6","text":"<p>To draw multiple charts in each subplot, simply add the <code>subplots</code> attribute. The chart's <code>subtitle</code> are then added at the top of each subplot, while the <code>title</code>, <code>xlabel</code> and <code>ylabel</code> are positioned to be global for all charts.</p>"},{"location":"how-to-guides/charts/linechart/#sharing-x-axis-andor-y-axis-across-subplots","title":"Sharing x-axis and/or y-axis across subplots\u00b6","text":"<p>To share the x-axis and/or y-axis across subplots, simply add the <code>sharex</code> and/or <code>sharey</code> attributes, which are boolean values that specify whether to share the axis across all subplots.</p>"},{"location":"how-to-guides/charts/linechart/#area-under-the-lines","title":"Area under the lines\u00b6","text":"<p>Specifying the <code>show_area</code> attribute will show the area between the line and y=0 across all subplots.</p>"},{"location":"how-to-guides/charts/linechart/#confidence-interval","title":"Confidence interval\u00b6","text":"<p>If a line chart has a confidence interval, it can be added by adding the <code>yerr</code> attribute to the chart's <code>data</code> attribute. Afterwards, the <code>show_yerr</code> attribute can be set to <code>True</code> to show the confidence interval.</p>"},{"location":"how-to-guides/charts/linechart/#additional-features","title":"Additional Features\u00b6","text":""},{"location":"how-to-guides/charts/linechart/#axis-scales","title":"Axis scales\u00b6","text":"<p>The user can change the axis scale using the <code>scalex</code> and <code>scaley</code> attributes. The supported scale options are:</p> Options Description <code>\"linear\"</code> The linear scale. <code>\"log\"</code> The log scale. <code>\"symlog\"</code> The symmetric log scale. <code>\"asinh\"</code> The asinh scale. <p>Again, to help with the options settings, the datachart.constants module contains the following constants:</p> Constant Description datachart.constants.SCALE The axis options."},{"location":"how-to-guides/charts/linechart/#saving-the-chart-as-an-image","title":"Saving the Chart as an Image\u00b6","text":"<p>To save the chart as an image, use the datachart.utils.save_figure function.</p>"},{"location":"how-to-guides/charts/linechart/#example-use-cases","title":"Example Use Cases\u00b6","text":""},{"location":"how-to-guides/charts/linechart/#example-1-roc-curve","title":"Example 1: ROC curve\u00b6","text":"<p>The example below shows how to create a ROC curve.</p> <p><code>data</code> attribute naming convention</p> <p>         By default, the <code>charts[\"data\"]</code> items should be dictionaries with the following keys: <code>x</code>, <code>y</code>, <code>yerr</code>. However, they can be any other keys. In the example below, the <code>charts[\"data\"]</code> contains the attributes <code>tp</code> and <code>fp</code>. To let the function know which values are which, you can specify the <code>x</code> and <code>y</code> attributes in the <code>charts</code> dictionary. This way, the function will know which value to use for the x- and y-axis.     </p>"},{"location":"how-to-guides/charts/linechart/#example-2-training-loss","title":"Example 2: Training loss\u00b6","text":"<p>The following example shows how to create a training loss chart.</p> <p><code>data</code> attribute naming convention</p> <p>         By default, the <code>charts[\"data\"]</code> items should be dictionaries with the following keys: <code>x</code>, <code>y</code>, <code>yerr</code>. However, they can be any other keys. In the example below, the <code>charts[\"data\"]</code> contains the attributes <code>step</code> and <code>loss</code>. To let the function know which values are which, you can specify the <code>x</code> and <code>y</code> attributes in the <code>charts</code> dictionary. This way, the function will know which value to use for the x- and y-axis.     </p>"},{"location":"how-to-guides/utility/","title":"Utility","text":"<p>The datachart.utils module of the <code>datachart</code> package provides various utility functions for data visualization.</p> <p>These utility functions include the datachart.utils.save_figure function for saving figures into files, as showcased in the charts section.</p> <p>In addition, it contains the datachart.utils.stats module for statistical calculations, as illustrated in the stats section.</p>"},{"location":"how-to-guides/utility/stats/","title":"Stats","text":"<p>This section showcases the utility functions found in the datachart.utils.stats module.</p> <p>Let us start by importing the supporting libraries:</p> In\u00a0[1]: Copied! <pre>import random\n</pre> import random In\u00a0[2]: Copied! <pre>random_values = random.sample(range(1, 100), 10)\nrandom_values\n</pre> random_values = random.sample(range(1, 100), 10) random_values Out[2]: <pre>[71, 95, 63, 76, 88, 29, 47, 35, 26, 8]</pre> <p>Let us now showcase the functions in the <code>stats</code> module.</p> In\u00a0[3]: Copied! <pre>from datachart.utils.stats import count\n</pre> from datachart.utils.stats import count In\u00a0[4]: Copied! <pre>count(random_values)\n</pre> count(random_values) Out[4]: <pre>10</pre> In\u00a0[5]: Copied! <pre>from datachart.utils.stats import mean\n</pre> from datachart.utils.stats import mean In\u00a0[6]: Copied! <pre>mean(random_values)\n</pre> mean(random_values) Out[6]: <pre>53.8</pre> In\u00a0[7]: Copied! <pre>from datachart.utils.stats import median\n</pre> from datachart.utils.stats import median In\u00a0[8]: Copied! <pre>median(random_values)\n</pre> median(random_values) Out[8]: <pre>55.0</pre> In\u00a0[9]: Copied! <pre>from datachart.utils.stats import stdev\n</pre> from datachart.utils.stats import stdev In\u00a0[10]: Copied! <pre>stdev(random_values)\n</pre> stdev(random_values) Out[10]: <pre>27.61448895054913</pre> In\u00a0[11]: Copied! <pre>from datachart.utils.stats import quantile\n</pre> from datachart.utils.stats import quantile <p>Show the 25th quantile:</p> In\u00a0[12]: Copied! <pre>quantile(random_values, 25)\n</pre> quantile(random_values, 25) Out[12]: <pre>29</pre> <p>Show the 75th quantile:</p> In\u00a0[13]: Copied! <pre>quantile(random_values, 75)\n</pre> quantile(random_values, 75) Out[13]: <pre>76</pre> In\u00a0[14]: Copied! <pre>from datachart.utils.stats import minimum\n</pre> from datachart.utils.stats import minimum In\u00a0[15]: Copied! <pre>minimum(random_values)\n</pre> minimum(random_values) Out[15]: <pre>8</pre> In\u00a0[16]: Copied! <pre>from datachart.utils.stats import maximum\n</pre> from datachart.utils.stats import maximum In\u00a0[17]: Copied! <pre>maximum(random_values)\n</pre> maximum(random_values) Out[17]: <pre>95</pre> <p>Under development</p> <p>         This theme is still under development. If you are interested in improving it, please let us know.     </p>"},{"location":"how-to-guides/utility/stats/#stats","title":"Stats\u00b6","text":""},{"location":"how-to-guides/utility/stats/#statistics-submodule","title":"Statistics Submodule\u00b6","text":"<p>The dataset.utils.stats submodule contains functions for calculating statistics. To showcase its use, let us create a list of random numbers:</p>"},{"location":"how-to-guides/utility/stats/#count","title":"Count\u00b6","text":"<p>The <code>count</code> function returns the number of elements in the list.</p>"},{"location":"how-to-guides/utility/stats/#mean","title":"Mean\u00b6","text":"<p>The <code>mean</code> function returns the mean of the values.</p>"},{"location":"how-to-guides/utility/stats/#median","title":"Median\u00b6","text":"<p>The <code>median</code> function returns the median of the values.</p>"},{"location":"how-to-guides/utility/stats/#standard-deviation","title":"Standard Deviation\u00b6","text":"<p>The <code>stdev</code> function returns the standard deviation of the values.</p>"},{"location":"how-to-guides/utility/stats/#quantile","title":"Quantile\u00b6","text":"<p>The <code>quantile</code> function returns the quantile of the values.</p>"},{"location":"how-to-guides/utility/stats/#minimum","title":"Minimum\u00b6","text":"<p>The <code>minimum</code> function returns the minimum of the values.</p>"},{"location":"how-to-guides/utility/stats/#maximum","title":"Maximum\u00b6","text":"<p>The <code>maximum</code> function returns the maximum of the values.</p>"},{"location":"references/","title":"Datachart Module","text":""},{"location":"references/#datachart","title":"datachart","text":"<p><code>Datachart</code> is a data visualization package.</p> <p>The <code>datachart</code> package provides utilities for easier data visualization. It provides a set of modules and utilities for data visualization, creating different charts and plots. It also provides methods for defining your own plot styles, and support for calculating the statistics.</p> MODULE DESCRIPTION <code>charts</code> <p>The module containing the methods for creating different charts.</p> <code>utils</code> <p>The module containing the utility classes and methods.</p> <code>config</code> <p>The module containing the utility for customizing the plot styles.</p> <code>themes</code> <p>The module containing the predefined style themes.</p> <code>constants</code> <p>The module containing the predefined constants used for easier plot creation.</p> <code>typings</code> <p>The module containing all of the typings used across the module.</p>"},{"location":"references/charts/","title":"Charts Module","text":""},{"location":"references/charts/#datachart.charts","title":"datachart.charts","text":"<p>Module containing the <code>charts</code>.</p> <p>The <code>charts</code> module contains the methods to create the plots and figures.</p> FUNCTION DESCRIPTION <code>LineChart</code> <p>Creates the line chart.</p> <code>BarChart</code> <p>Creates the bar chart.</p> <code>Histogram</code> <p>Creates the histogram.</p> <code>Heatmap</code> <p>Creates the heatmap.</p>"},{"location":"references/charts/#chart-functions","title":"Chart Functions","text":""},{"location":"references/charts/#datachart.charts.LineChart","title":"datachart.charts.LineChart","text":"<pre><code>LineChart(attrs: LineChartAttrs) -&gt; plt.Figure\n</code></pre> <p>Creates the line chart.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.charts import LineChart\n&gt;&gt;&gt; figure = LineChart({\n...     \"charts\": {\n...         \"data\": [\n...             {\"x\": 1, \"y\": 5},\n...             {\"x\": 2, \"y\": 10},\n...             {\"x\": 3, \"y\": 15},\n...             {\"x\": 4, \"y\": 20},\n...             {\"x\": 5, \"y\": 25}\n...         ],\n...     },\n...     \"title\": \"Basic Line Chart\",\n...     \"xlabel\": \"X\",\n...     \"ylabel\": \"Y\",\n... })\n</code></pre> PARAMETER DESCRIPTION <code>attrs</code> <p>The line chart attributes.</p> <p> TYPE: <code>LineChartAttrs</code> </p> RETURNS DESCRIPTION <code>plt.Figure</code> <p>The figure containing the line chart.</p>"},{"location":"references/charts/#datachart.charts.BarChart","title":"datachart.charts.BarChart","text":"<pre><code>BarChart(attrs: BarChartAttrs) -&gt; plt.Figure\n</code></pre> <p>Creates the bar chart.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.charts import BarChart\n&gt;&gt;&gt; figure = BarChart({\n...     \"charts\": {\n...         \"data\": [\n...             {\"label\": \"cat1\", \"y\": 5},\n...             {\"label\": \"cat2\", \"y\": 10},\n...             {\"label\": \"cat3\", \"y\": 15},\n...             {\"label\": \"cat4\", \"y\": 20},\n...             {\"label\": \"cat5\", \"y\": 25}\n...         ],\n...     },\n...     \"title\": \"Basic Bar Chart\",\n...     \"xlabel\": \"LABEL\",\n...     \"ylabel\": \"Y\",\n... })\n</code></pre> PARAMETER DESCRIPTION <code>attrs</code> <p>The bar chart attributes.</p> <p> TYPE: <code>BarChartAttrs</code> </p> RETURNS DESCRIPTION <code>plt.Figure</code> <p>The figure containing the bar chart.</p>"},{"location":"references/charts/#datachart.charts.Histogram","title":"datachart.charts.Histogram","text":"<pre><code>Histogram(attrs: HistogramChartAttrs) -&gt; plt.Figure\n</code></pre> <p>Creates the histogram.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.charts import Histogram\n&gt;&gt;&gt; figure = Histogram({\n...     \"charts\": {\n...         \"data\": [\n...             {\"x\": 1},\n...             {\"x\": 2},\n...             {\"x\": 3},\n...             {\"x\": 4},\n...             {\"x\": 5}\n...         ],\n...     },\n...     \"title\": \"Basic Histogram\",\n...     \"xlabel\": \"X\",\n...     \"ylabel\": \"Y\",\n... })\n</code></pre> PARAMETER DESCRIPTION <code>attrs</code> <p>The histogram chart attributes.</p> <p> TYPE: <code>HistogramChartAttrs</code> </p> RETURNS DESCRIPTION <code>plt.Figure</code> <p>The figure containing the histogram.</p>"},{"location":"references/charts/#datachart.charts.Heatmap","title":"datachart.charts.Heatmap","text":"<pre><code>Heatmap(attrs: HeatmapChartAttrs) -&gt; plt.Figure\n</code></pre> <p>Creates the heatmap.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.charts import Heatmap\n&gt;&gt;&gt; figure = Heatmap({\n...     \"charts\": {\n...         \"data\": [\n...             [1, 2, 3],\n...             [4, 5, 6],\n...             [7, 8, 9]\n...         ],\n...     },\n...     \"title\": \"Basic Heatmap\",\n...     \"xlabel\": \"X\",\n...     \"ylabel\": \"Y\",\n... })\n</code></pre> PARAMETER DESCRIPTION <code>attrs</code> <p>The heatmap chart attributes.</p> <p> TYPE: <code>HeatmapChartAttrs</code> </p> RETURNS DESCRIPTION <code>plt.Figure</code> <p>The figure containing the heatmap.</p>"},{"location":"references/config/","title":"Config Module","text":""},{"location":"references/config/#datachart.config","title":"datachart.config","text":"<p>The module containing the <code>config</code>.</p> <p>The <code>config</code> module contains the configuration objects, enabling the users to globally customize the chart and plot styles.</p> ATTRIBUTE DESCRIPTION <code>config</code> <p>The configuration instance.</p> <p> TYPE: <code>Config</code> </p> CLASS DESCRIPTION <code>Config</code> <p>The configuration class.</p>"},{"location":"references/config/#attributes","title":"Attributes","text":""},{"location":"references/config/#datachart.config.config","title":"datachart.config.config","text":"<pre><code>config: Config = Config()\n</code></pre> <p>The configuration instance that the users should interact with.</p>"},{"location":"references/config/#classes","title":"Classes","text":""},{"location":"references/config/#datachart.config.Config","title":"datachart.config.Config","text":"<p>The class representing the configuration options.</p> ATTRIBUTE DESCRIPTION <code>config</code> <p>The style configuration.</p> <p> TYPE: <code>StyleAttrs</code> </p> METHOD DESCRIPTION <code>set_theme</code> <p>Set the global configuration to match the theme.</p> <code>reset_config</code> <p>Resets the global configuration.</p> <code>update_config</code> <p>Updates the global configuration.</p> <code>get</code> <p>Gets the associated configuration attribute.</p>"},{"location":"references/config/#datachart.config.Config.__init__","title":"__init__","text":"<pre><code>__init__()\n</code></pre> <p>Initializes the global configuration.</p>"},{"location":"references/config/#datachart.config.Config.set_theme","title":"set_theme","text":"<pre><code>set_theme(theme: THEME) -&gt; None\n</code></pre> <p>Sets the global configuration to match the theme.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.constants import THEME\n&gt;&gt;&gt; from datachart.config import config\n&gt;&gt;&gt; config.set_theme(THEME.DEFAULT)\n&gt;&gt;&gt; config.get(\"theme\")\n'default'\n</code></pre> PARAMETER DESCRIPTION <code>theme</code> <p>The theme to be set.</p> <p> TYPE: <code>THEME</code> </p>"},{"location":"references/config/#datachart.config.Config.reset_config","title":"reset_config","text":"<pre><code>reset_config() -&gt; None\n</code></pre> <p>Resets the global configuration.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.config import config\n&gt;&gt;&gt; config.reset_config()\n&gt;&gt;&gt; config.get(\"theme\")\n'default'\n</code></pre>"},{"location":"references/config/#datachart.config.Config.update_config","title":"update_config","text":"<pre><code>update_config(config: StyleAttrs) -&gt; None\n</code></pre> <p>Updates the global configuration.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.config import config\n&gt;&gt;&gt; config.update_config({\"font_general_color\": \"#FFFFFF\"})\n&gt;&gt;&gt; config.get(\"font_general_color\")\n'#FFFFFF'\n</code></pre> PARAMETER DESCRIPTION <code>config</code> <p>The configuration attributes to be updated.</p> <p> TYPE: <code>StyleAttrs</code> </p>"},{"location":"references/config/#datachart.config.Config.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(attr: str) -&gt; Any\n</code></pre> <p>Gets the associated configuration attribute.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.config import config\n&gt;&gt;&gt; config[\"font_general_color\"]\n'#FFFFFF'\n</code></pre> PARAMETER DESCRIPTION <code>attr</code> <p>The attribute to retrieve.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>The attribute value if present. Otherwise, <code>None</code>.</p>"},{"location":"references/config/#datachart.config.Config.get","title":"get","text":"<pre><code>get(attr: str, default: Any = None) -&gt; Any\n</code></pre> <p>Gets the associated configuration attribute.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.config import config\n&gt;&gt;&gt; config.get(\"font_general_color\")\n'#FFFFFF'\n</code></pre> PARAMETER DESCRIPTION <code>attr</code> <p>The attribute to retrieve.</p> <p> TYPE: <code>str</code> </p> <code>default</code> <p>The value to return, if the attribute is not present in the config.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>The attribute value if present. Otherwise, returns the <code>default</code> value.</p>"},{"location":"references/config/#datachart.config.Config.__repr__","title":"__repr__","text":"<pre><code>__repr__()\n</code></pre> <p>Represents the configuration as a json string.</p>"},{"location":"references/constants/","title":"Constants Module","text":""},{"location":"references/constants/#datachart.constants","title":"datachart.constants","text":"<p>Module containing the <code>constants</code>.</p> <p>The <code>constants</code> module procides a set of predefined constants used in the package. These include figure size, format, style, and other figure manipulation values.</p> CLASS DESCRIPTION <code>FIG_SIZE</code> <p>The predefined figure sizes.</p> <code>FIG_FORMAT</code> <p>The supported figure formats.</p> <code>FONT_STYLE</code> <p>The supported font styles.</p> <code>FONT_WEIGHT</code> <p>The supported font weights.</p> <code>LINE_MARKER</code> <p>The supported line markers.</p> <code>LINE_STYLE</code> <p>The supported line styles.</p> <code>LINE_DRAW_STYLE</code> <p>The supported line draw styles.</p> <code>HATCH_STYLE</code> <p>The supported hatch styles.</p> <code>LEGEND_ALIGN</code> <p>The supported legend alignments.</p> <code>HISTOGRAM_TYPE</code> <p>The supported histogram types.</p> <code>COLORS</code> <p>The predefined colors.</p> <code>NORMALIZE</code> <p>The supported normalization options.</p> <code>ORIENTATION</code> <p>The supported orientations.</p> <code>VALFMT</code> <p>The predefined value formats.</p> <code>THEME</code> <p>The predefined themes.</p> <code>SHOW_GRID</code> <p>The supported show grid options.</p>"},{"location":"references/constants/#datachart.constants.FIG_SIZE","title":"FIG_SIZE","text":"<p>The predefined figure sizes.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.constants import FIG_SIZE\n&gt;&gt;&gt; FIG_SIZE.DEFAULT\n(6.4, 4.8)\n</code></pre> ATTRIBUTE DESCRIPTION <code>DEFAULT</code> <p>The default figure size. Equals to <code>(6.4, 4.8)</code>.</p> <p> TYPE: <code>Tuple[float, float]</code> </p> <code>A4</code> <p>The A4 figure size. Equals to <code>(8.2, 11.6)</code>.</p> <p> TYPE: <code>Tuple[float, float]</code> </p> <code>A4_NARROW</code> <p>The flat, full-width figure size. Equals to <code>(8.2, 2.4)</code>.</p> <p> TYPE: <code>Tuple[float, float]</code> </p> <code>A4_REGULAR</code> <p>The regular, full-width figure size. Equals to <code>(8.2, 4.8)</code>.</p> <p> TYPE: <code>Tuple[float, float]</code> </p> <code>A4_WIDE</code> <p>The tall, full-width figure size. Equals to <code>(8.2, 7.2)</code>.</p> <p> TYPE: <code>Tuple[float, float]</code> </p> <code>SQUARE</code> <p>The regular square figure size. Equals to <code>(6.4, 6.4)</code>.</p> <p> TYPE: <code>Tuple[float, float]</code> </p> <code>SQUARE_SMALL</code> <p>The small square figure size. Equals to <code>(4.8, 4.8)</code>.</p> <p> TYPE: <code>Tuple[float, float]</code> </p> <code>SQUARE_LARGE</code> <p>The large square figure size. Equals to <code>(8.2, 8.2)</code>.</p> <p> TYPE: <code>Tuple[float, float]</code> </p>"},{"location":"references/constants/#datachart.constants.FIG_FORMAT","title":"FIG_FORMAT","text":"<p>The supported figure formats.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.constants import FIG_FORMAT\n&gt;&gt;&gt; FIG_FORMAT.DEFAULT\n\"png\"\n</code></pre> ATTRIBUTE DESCRIPTION <code>DEFAULT</code> <p>The default format. Same as <code>FIG_FORMAT.PNG</code>.</p> <p> TYPE: <code>str</code> </p> <code>SVG</code> <p>The svg format. Equals to <code>\"svg\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>PDF</code> <p>The pdf format. Equals to <code>\"pdf\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>PNG</code> <p>The png format. Equals to <code>\"png\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>WEBP</code> <p>The webp format. Equals to <code>\"webp\"</code>.</p> <p> TYPE: <code>str</code> </p>"},{"location":"references/constants/#datachart.constants.FONT_STYLE","title":"FONT_STYLE","text":"<p>The supported font styles.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.constants import FONT_STYLE\n&gt;&gt;&gt; FONT_STYLE.DEFAULT\n\"normal\"\n</code></pre> ATTRIBUTE DESCRIPTION <code>DEFAULT</code> <p>The default font style. Same as <code>FONT_STYLE.NORMAL</code>.</p> <p> TYPE: <code>str</code> </p> <code>NORMAL</code> <p>The normal font style. Equals to <code>\"normal\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>ITALIC</code> <p>The italic font style. Equals to <code>\"italic\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>OBLIQUE</code> <p>The oblique font style. Equals to <code>\"oblique\"</code>.</p> <p> TYPE: <code>str</code> </p>"},{"location":"references/constants/#datachart.constants.FONT_WEIGHT","title":"FONT_WEIGHT","text":"<p>The supported font weights.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.constants import FONT_WEIGHT\n&gt;&gt;&gt; FONT_WEIGHT.DEFAULT\n\"normal\"\n</code></pre> ATTRIBUTE DESCRIPTION <code>DEFAULT</code> <p>The default font weight. Same as <code>FONT_WEIGHT.NORMAL</code>.</p> <p> TYPE: <code>str</code> </p> <code>ULTRA_LIGHT</code> <p>The ultra light font weight. Equals to <code>\"ultralight\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>LIGHT</code> <p>The light font weight. Equals to <code>\"light\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>NORMAL</code> <p>The normal font weight. Equals to <code>\"normal\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>BOLD</code> <p>The bold font weight. Equals to <code>\"bold\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>HEAVY</code> <p>The heavy font weight. Equals to <code>\"heavy\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>ULTRA_HEAVY</code> <p>The ultra heavy font weight. Equals to <code>\"ultrabold\"</code>.</p> <p> TYPE: <code>str</code> </p>"},{"location":"references/constants/#datachart.constants.LINE_MARKER","title":"LINE_MARKER","text":"<p>The supported line markers.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.constants import LINE_MARKER\n&gt;&gt;&gt; LINE_MARKER.PIXEL\n\",\"\n</code></pre> ATTRIBUTE DESCRIPTION <code>PIXEL</code> <p>The pixel line marker. Equals to <code>\",\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>POINT</code> <p>The point line marker. Equals to <code>\".\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>CIRCLE</code> <p>The circle line marker. Equals to <code>\"o\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>TRIANGLE</code> <p>The triangle line marker. Equals to <code>\"^\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>SQUARE</code> <p>The square line marker. Equals to <code>\"s\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>PENTAGON</code> <p>The pentagon line marker. Equals to <code>\"p\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>HEXAGON</code> <p>The hexagon line marker. Equals to <code>\"h\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>STAR</code> <p>The star line marker. Equals to <code>\"*\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>CROSS</code> <p>The cross line marker. Equals to <code>\"x\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>PLUS</code> <p>The plus line marker. Equals to <code>\"+\"</code>.</p> <p> TYPE: <code>str</code> </p>"},{"location":"references/constants/#datachart.constants.LINE_STYLE","title":"LINE_STYLE","text":"<p>The supported line styles.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.constants import LINE_STYLE\n&gt;&gt;&gt; LINE_STYLE.SOLID\n\"-\"\n</code></pre> ATTRIBUTE DESCRIPTION <code>SOLID</code> <p>The solid line style. Equals to <code>\"-\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>DASHED</code> <p>The dashed line style. Equals to <code>\"--\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>DASHDOT</code> <p>The dashdot line style. Equals to <code>\"-.\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>DOTTED</code> <p>The dotted line style. Equals to <code>\":\"</code>.</p> <p> TYPE: <code>str</code> </p>"},{"location":"references/constants/#datachart.constants.LINE_DRAW_STYLE","title":"LINE_DRAW_STYLE","text":"<p>The supported line draw styles.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.constants import LINE_DRAW_STYLE\n&gt;&gt;&gt; LINE_DRAW_STYLE.DEFAULT\n\"default\"\n</code></pre> ATTRIBUTE DESCRIPTION <code>DEFAULT</code> <p>The default line draw style. Equals to <code>\"default\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>STEPS</code> <p>The steps line draw style. Equals to <code>\"steps-pre\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>STEPS_PRE</code> <p>The pre-steps line draw style. Equals to <code>\"steps-pre\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>STEPS_MID</code> <p>The mid-steps line draw style. Equals to <code>\"steps-mid\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>STEPS_POST</code> <p>The post-steps line draw style. Equals to <code>\"steps-post\"</code>.</p> <p> TYPE: <code>str</code> </p>"},{"location":"references/constants/#datachart.constants.HATCH_STYLE","title":"HATCH_STYLE","text":"<p>The supported hatch styles.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.constants import HATCH_STYLE\n&gt;&gt;&gt; HATCH_STYLE.DEFAULT\nNone\n</code></pre> ATTRIBUTE DESCRIPTION <code>DEFAULT</code> <p>The default hatch style. Equals to <code>None</code>.</p> <p> TYPE: <code>str</code> </p> <code>DIAGONAL</code> <p>The diagonal hatch style. Equals to <code>\"/\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>VERTICAL</code> <p>The vertical hatch style. Equals to <code>\"|\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>HORIZONTAL</code> <p>The horizontal hatch style. Equals to <code>\"-\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>CROSSED</code> <p>The crossed hatch style. Equals to <code>\"+\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>CROSSED_DIAGONAL</code> <p>The crossed diagonal hatch style. Equals to <code>\"x\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>DOTS</code> <p>The dots hatch style. Equals to <code>\".\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>CIRCLES</code> <p>The circles hatch style. Equals to <code>\"o\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>STARS</code> <p>The stars hatch style. Equals to <code>\"*\"</code>.</p> <p> TYPE: <code>str</code> </p>"},{"location":"references/constants/#datachart.constants.LEGEND_ALIGN","title":"LEGEND_ALIGN","text":"<p>The supported legend alignments.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.constants import LEGEND_ALIGN\n&gt;&gt;&gt; LEGEND_ALIGN.DEFAULT\n\"left\"\n</code></pre> ATTRIBUTE DESCRIPTION <code>DEFAULT</code> <p>The default legend alignment. Same as <code>LEGEND_ALIGN.LEFT</code>.</p> <p> TYPE: <code>str</code> </p> <code>CENTER</code> <p>The center legend alignment. Equals to <code>\"center\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>RIGHT</code> <p>The right legend alignment. Equals to <code>\"right\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>LEFT</code> <p>The left legend alignment. Equals to <code>\"left\"</code>.</p> <p> TYPE: <code>str</code> </p>"},{"location":"references/constants/#datachart.constants.HISTOGRAM_TYPE","title":"HISTOGRAM_TYPE","text":"<p>The supported histogram types.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.constants import HISTOGRAM_TYPE\n&gt;&gt;&gt; HISTOGRAM_TYPE.BAR\n\"bar\"\n</code></pre> ATTRIBUTE DESCRIPTION <code>BAR</code> <p>The bar histogram style. Equals to <code>\"bar\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>STEP</code> <p>The step histogram style. Equals to <code>\"step\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>STEPFILLED</code> <p>The stepfilled histogram style. Equals to <code>\"stepfilled\"</code>.</p> <p> TYPE: <code>str</code> </p>"},{"location":"references/constants/#datachart.constants.COLORS","title":"COLORS","text":"<p>The predefined colors.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.constants import COLORS\n&gt;&gt;&gt; COLORS.Blue\n'blue'\n</code></pre> ATTRIBUTE DESCRIPTION <code>Blue</code> <p>The single-hue blue color. Equals to <code>\"blue\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>Green</code> <p>The single-hue green color. Equals to <code>\"green\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>Orange</code> <p>The single-hue orange color. Equals to <code>\"orange\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>Purple</code> <p>The single-hue purple color. Equals to <code>\"purple\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>Grey</code> <p>The single-hue grey color. Equals to <code>\"grey\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>YlGnBu</code> <p>The multi-hue yellow-green-blue colors. Equals to <code>\"ylgnbu\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>YlGn</code> <p>The multi-hue yellow-green colors. Equals to <code>\"ylgn\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>BuGn</code> <p>The multi-hue blue-green colors. Equals to <code>\"bugn\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>GnBu</code> <p>The multi-hue green-blue colors. Equals to <code>\"gnbu\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>PuBu</code> <p>The multi-hue purple-blue colors. Equals to <code>\"pubu\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>RdPu</code> <p>The diverging red-purple colors. Equals to <code>\"rdbn\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>RdYlBu</code> <p>The diverging red-yellow-blue colors. Equals to <code>\"rdylbu\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>BrNg</code> <p>The diverging brown-grey colors. Equals to <code>\"brng\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>PuGn</code> <p>The diverging purple-green colors. Equals to <code>\"pugn\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>OrPu</code> <p>The diverging orange-purple colors. Equals to <code>\"puor\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>RdGy</code> <p>The diverging red-gray colors. Equals to <code>\"rdgy\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>RdYlGn</code> <p>The diverging red-yellow-green colors. Equals to <code>\"rdylgn\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>Spectral</code> <p>The diverging spectral colors. Equals to <code>\"spectral\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>MixedLight</code> <p>The quantitative light color mix. Equals to <code>\"mixed_light\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>MixedDark</code> <p>The quantitative dark color mix. Equals to <code>\"mixed_dark\"</code>.</p> <p> TYPE: <code>str</code> </p>"},{"location":"references/constants/#datachart.constants.NORMALIZE","title":"NORMALIZE","text":"<p>The supported normalization options.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.constants import NORMALIZE\n&gt;&gt;&gt; NORMALIZE.LINEAR\n\"linear\"\n</code></pre> ATTRIBUTE DESCRIPTION <code>LINEAR</code> <p>The linear normalization. Equals to <code>\"linear\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>LOG</code> <p>The logistic normalization. Equals to <code>\"log\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>SYMLOG</code> <p>The symlog normalization. Equals to <code>\"symlog\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>ASINH</code> <p>The asinh normalization. Equals to <code>\"asinh\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>LOGIT</code> <p>The logit normalization. Equals to <code>\"logit\"</code>.</p> <p> TYPE: <code>str</code> </p>"},{"location":"references/constants/#datachart.constants.ORIENTATION","title":"ORIENTATION","text":"<p>The supported orientations.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.constants import ORIENTATION\n&gt;&gt;&gt; ORIENTATION.HORIZONTAL\n\"horizontal\"\n</code></pre> ATTRIBUTE DESCRIPTION <code>HORIZONTAL</code> <p>The horizontal orientation. Equals to <code>\"horizontal\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>VERTICAL</code> <p>The vertical orientation. Equals to <code>\"vertical\"</code>.</p> <p> TYPE: <code>str</code> </p>"},{"location":"references/constants/#datachart.constants.VALFMT","title":"VALFMT","text":"<p>The predefined value formats.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.constants import VALFMT\n&gt;&gt;&gt; VALFMT.DEFAULT\n\"{x}\"\n</code></pre> ATTRIBUTE DESCRIPTION <code>DEFAULT</code> <p>The default value format. Equals to <code>\"{x}\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>INTEGER</code> <p>The integer value format. Equals to <code>\"{x:d}\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>DECIMAL</code> <p>The decimal value format. Equals to <code>\"{x:.1f}\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>PERCENT</code> <p>The percentage value format. Equals to <code>\"{x:.1%}\"</code>.</p> <p> TYPE: <code>str</code> </p>"},{"location":"references/constants/#datachart.constants.THEME","title":"THEME","text":"<p>The predefined themes.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.constants import THEME\n&gt;&gt;&gt; THEME.DEFAULT\n\"default\"\n</code></pre> ATTRIBUTE DESCRIPTION <code>DEFAULT</code> <p>The default theme. Equals to <code>\"default\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>GREYSCALE</code> <p>The greyscale theme. Equals to <code>\"greyscale\"</code>.</p> <p> TYPE: <code>str</code> </p>"},{"location":"references/constants/#datachart.constants.SHOW_GRID","title":"SHOW_GRID","text":"<p>The supported show grid options.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.constants import SHOW_GRID\n&gt;&gt;&gt; SHOW_GRID.DEFAULT\nNone\n</code></pre> ATTRIBUTE DESCRIPTION <code>DEFAULT</code> <p>The default show grid. Same as <code>SHOW_GRID.NONE</code>.</p> <p> TYPE: <code>str</code> </p> <code>NONE</code> <p>Do not show the grid. Equals to <code>None</code>.</p> <p> TYPE: <code>None</code> </p> <code>X</code> <p>Show the x-axis grid. Equals to <code>\"x\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>Y</code> <p>Show the y-axis grid. Equals to <code>\"y\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>BOTH</code> <p>Show both the x- and y-axis grid. Equals to <code>\"both\"</code>.</p> <p> TYPE: <code>str</code> </p>"},{"location":"references/constants/#datachart.constants.SCALE","title":"SCALE","text":"<p>The supported scale options.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.constants import SCALE\n&gt;&gt;&gt; SCALE.DEFAULT\n\"linear\"\n</code></pre> ATTRIBUTE DESCRIPTION <code>DEFAULT</code> <p>The default scale. Same as <code>SCALE.LINEAR</code>.</p> <p> TYPE: <code>str</code> </p> <code>LINEAR</code> <p>The linear scale. Equals to <code>\"linear\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>LOG</code> <p>The log scale. Equals to <code>\"log\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>SYMLOG</code> <p>The symlog scale. Equals to <code>\"symlog\"</code>.</p> <p> TYPE: <code>str</code> </p> <code>ASINH</code> <p>The asinh scale. Equals to <code>\"asinh\"</code>.</p> <p> TYPE: <code>str</code> </p>"},{"location":"references/themes/","title":"Themes Module","text":""},{"location":"references/themes/#datachart.themes","title":"datachart.themes","text":"<p>The module containing the <code>themes</code>.</p> <p>The <code>themes</code> module contains the predefined style themes that are used to visualize the plots.</p> ATTRIBUTE DESCRIPTION <code>DEFAULT_THEME</code> <p>The default theme style.</p> <p> TYPE: <code>StyleAttrs</code> </p> <code>GREYSCALE_THEME</code> <p>The greyscale theme style.</p> <p> TYPE: <code>StyleAttrs</code> </p>"},{"location":"references/themes/#themes","title":"Themes","text":""},{"location":"references/themes/#datachart.themes.DEFAULT_THEME","title":"datachart.themes.DEFAULT_THEME","text":"<pre><code>DEFAULT_THEME: StyleAttrs = {\n    \"color_general_singular\": COLORS.Blue,\n    \"color_general_multiple\": COLORS.Spectral,\n    \"font_general_family\": \"sans-serif\",\n    \"font_general_sansserif\": [\"Helvetica\", \"Arial\"],\n    \"font_general_color\": \"#000000\",\n    \"font_general_size\": 11,\n    \"font_general_style\": FONT_STYLE.NORMAL,\n    \"font_general_weight\": FONT_WEIGHT.NORMAL,\n    \"font_title_size\": 12,\n    \"font_title_color\": \"#000000\",\n    \"font_title_style\": FONT_STYLE.NORMAL,\n    \"font_title_weight\": FONT_WEIGHT.NORMAL,\n    \"font_subtitle_size\": 11,\n    \"font_subtitle_color\": \"#000000\",\n    \"font_subtitle_style\": FONT_STYLE.NORMAL,\n    \"font_subtitle_weight\": FONT_WEIGHT.NORMAL,\n    \"font_xlabel_size\": 10,\n    \"font_xlabel_color\": \"#000000\",\n    \"font_xlabel_style\": FONT_STYLE.NORMAL,\n    \"font_xlabel_weight\": FONT_WEIGHT.NORMAL,\n    \"font_ylabel_size\": 10,\n    \"font_ylabel_color\": \"#000000\",\n    \"font_ylabel_style\": FONT_STYLE.NORMAL,\n    \"font_ylabel_weight\": FONT_WEIGHT.NORMAL,\n    \"axes_spines_top_visible\": True,\n    \"axes_spines_right_visible\": True,\n    \"axes_spines_bottom_visible\": True,\n    \"axes_spines_left_visible\": True,\n    \"axes_spines_width\": 0.5,\n    \"axes_spines_zorder\": 100,\n    \"axes_ticks_length\": 2,\n    \"axes_ticks_label_size\": 9,\n    \"plot_legend_shadow\": False,\n    \"plot_legend_frameon\": True,\n    \"plot_legend_alignment\": \"left\",\n    \"plot_legend_font_size\": 9,\n    \"plot_legend_title_size\": 10,\n    \"plot_legend_label_color\": \"#000000\",\n    \"plot_area_alpha\": 0.3,\n    \"plot_area_color\": None,\n    \"plot_area_linewidth\": 0,\n    \"plot_area_hatch\": None,\n    \"plot_area_zorder\": 3,\n    \"plot_grid_alpha\": 1,\n    \"plot_grid_color\": \"#E6E6E6\",\n    \"plot_grid_linewidth\": 0.5,\n    \"plot_grid_linestyle\": LINE_STYLE.SOLID,\n    \"plot_grid_zorder\": 0,\n    \"plot_line_color\": None,\n    \"plot_line_style\": LINE_STYLE.SOLID,\n    \"plot_line_marker\": None,\n    \"plot_line_width\": 1,\n    \"plot_line_alpha\": 1.0,\n    \"plot_line_drawstyle\": LINE_DRAW_STYLE.DEFAULT,\n    \"plot_line_zorder\": 3,\n    \"plot_bar_color\": None,\n    \"plot_bar_alpha\": 1.0,\n    \"plot_bar_width\": 0.8,\n    \"plot_bar_zorder\": 3,\n    \"plot_bar_hatch\": None,\n    \"plot_bar_edge_width\": 0.5,\n    \"plot_bar_edge_color\": \"#000000\",\n    \"plot_bar_error_color\": \"#000000\",\n    \"plot_hist_color\": None,\n    \"plot_hist_alpha\": 1.0,\n    \"plot_hist_zorder\": 3,\n    \"plot_hist_fill\": None,\n    \"plot_hist_hatch\": None,\n    \"plot_hist_type\": \"bar\",\n    \"plot_hist_align\": \"mid\",\n    \"plot_hist_edge_width\": 0.5,\n    \"plot_hist_edge_color\": \"#000000\",\n    \"plot_vline_color\": None,\n    \"plot_vline_style\": LINE_STYLE.SOLID,\n    \"plot_vline_width\": 1,\n    \"plot_vline_alpha\": 1.0,\n    \"plot_hline_color\": None,\n    \"plot_hline_style\": LINE_STYLE.SOLID,\n    \"plot_hline_width\": 1,\n    \"plot_hline_alpha\": 1.0,\n    \"plot_heatmap_cmap\": COLORS.Blue,\n    \"plot_heatmap_alpha\": 1.0,\n    \"plot_heatmap_font_size\": 9,\n    \"plot_heatmap_font_color\": \"#000000\",\n    \"plot_heatmap_font_style\": FONT_STYLE.NORMAL,\n    \"plot_heatmap_font_weight\": FONT_WEIGHT.NORMAL,\n}\n</code></pre>"},{"location":"references/themes/#datachart.themes.GREYSCALE_THEME","title":"datachart.themes.GREYSCALE_THEME","text":"<pre><code>GREYSCALE_THEME: StyleAttrs = {\n    \"color_general_singular\": COLORS.Grey,\n    \"color_general_multiple\": COLORS.Grey,\n    \"font_general_family\": \"sans-serif\",\n    \"font_general_sansserif\": [\"Helvetica\", \"Arial\"],\n    \"font_general_color\": \"#000000\",\n    \"font_general_size\": 11,\n    \"font_general_style\": FONT_STYLE.NORMAL,\n    \"font_general_weight\": FONT_WEIGHT.NORMAL,\n    \"font_title_size\": 12,\n    \"font_title_color\": \"#000000\",\n    \"font_title_style\": FONT_STYLE.NORMAL,\n    \"font_title_weight\": FONT_WEIGHT.NORMAL,\n    \"font_subtitle_size\": 11,\n    \"font_subtitle_color\": \"#000000\",\n    \"font_subtitle_style\": FONT_STYLE.NORMAL,\n    \"font_subtitle_weight\": FONT_WEIGHT.NORMAL,\n    \"font_xlabel_size\": 10,\n    \"font_xlabel_color\": \"#000000\",\n    \"font_xlabel_style\": FONT_STYLE.NORMAL,\n    \"font_xlabel_weight\": FONT_WEIGHT.NORMAL,\n    \"font_ylabel_size\": 10,\n    \"font_ylabel_color\": \"#000000\",\n    \"font_ylabel_style\": FONT_STYLE.NORMAL,\n    \"font_ylabel_weight\": FONT_WEIGHT.NORMAL,\n    \"axes_spines_top_visible\": True,\n    \"axes_spines_right_visible\": True,\n    \"axes_spines_bottom_visible\": True,\n    \"axes_spines_left_visible\": True,\n    \"axes_spines_width\": 0.5,\n    \"axes_spines_zorder\": 100,\n    \"axes_ticks_length\": 2,\n    \"axes_ticks_label_size\": 9,\n    \"plot_legend_shadow\": False,\n    \"plot_legend_frameon\": True,\n    \"plot_legend_alignment\": \"left\",\n    \"plot_legend_font_size\": 9,\n    \"plot_legend_title_size\": 10,\n    \"plot_legend_label_color\": \"#000000\",\n    \"plot_area_alpha\": 0.3,\n    \"plot_area_color\": None,\n    \"plot_area_linewidth\": 0,\n    \"plot_area_hatch\": None,\n    \"plot_area_zorder\": 3,\n    \"plot_grid_alpha\": 1,\n    \"plot_grid_color\": \"#E6E6E6\",\n    \"plot_grid_linewidth\": 0.5,\n    \"plot_grid_linestyle\": LINE_STYLE.SOLID,\n    \"plot_grid_zorder\": 0,\n    \"plot_line_color\": None,\n    \"plot_line_style\": LINE_STYLE.SOLID,\n    \"plot_line_marker\": None,\n    \"plot_line_width\": 1,\n    \"plot_line_alpha\": 1.0,\n    \"plot_line_drawstyle\": LINE_DRAW_STYLE.DEFAULT,\n    \"plot_line_zorder\": 3,\n    \"plot_bar_color\": None,\n    \"plot_bar_alpha\": 1.0,\n    \"plot_bar_width\": 0.8,\n    \"plot_bar_zorder\": 3,\n    \"plot_bar_hatch\": None,\n    \"plot_bar_edge_width\": 0.5,\n    \"plot_bar_edge_color\": \"#000000\",\n    \"plot_bar_error_color\": \"#000000\",\n    \"plot_hist_color\": None,\n    \"plot_hist_alpha\": 1.0,\n    \"plot_hist_zorder\": 3,\n    \"plot_hist_fill\": None,\n    \"plot_hist_hatch\": None,\n    \"plot_hist_type\": \"bar\",\n    \"plot_hist_align\": \"mid\",\n    \"plot_hist_edge_width\": 0.5,\n    \"plot_hist_edge_color\": \"#000000\",\n    \"plot_vline_color\": \"#000000\",\n    \"plot_vline_style\": LINE_STYLE.SOLID,\n    \"plot_vline_width\": 1,\n    \"plot_vline_alpha\": 1.0,\n    \"plot_hline_color\": \"#000000\",\n    \"plot_hline_style\": LINE_STYLE.SOLID,\n    \"plot_hline_width\": 1,\n    \"plot_hline_alpha\": 1.0,\n    \"plot_heatmap_cmap\": COLORS.Grey,\n    \"plot_heatmap_alpha\": 1.0,\n    \"plot_heatmap_font_size\": 9,\n    \"plot_heatmap_font_color\": \"#000000\",\n    \"plot_heatmap_font_style\": FONT_STYLE.NORMAL,\n    \"plot_heatmap_font_weight\": FONT_WEIGHT.NORMAL,\n}\n</code></pre>"},{"location":"references/typings/","title":"Typings Module","text":""},{"location":"references/typings/#datachart.typings","title":"datachart.typings","text":"<p>Module containing the <code>typings</code>.</p> <p>The <code>typings</code> module contains the typings for all chart components. The module is intended to contain the typings for easier input value format checkup.</p> ATTRIBUTE DESCRIPTION <code>ChartAttrs</code> <p>The union of all chart attributes.</p> <p> </p> CLASS DESCRIPTION <code>ChartCommonAttrs</code> <p>The chart attributes common to all chart types.</p> <code>VLinePlotAttrs</code> <p>The vertical line plot attributes.</p> <code>HLinePlotAttrs</code> <p>The horizontal line plot attributes.</p> <code>LineChartAttrs</code> <p>The line chart attributes.</p> <code>LineSingleChartAttrs</code> <p>The single chart attributes for the line chart.</p> <code>LineDataPointAttrs</code> <p>The data point attributes for the line chart.</p> <code>BarChartAttrs</code> <p>The bar chart attributes.</p> <code>BarSingleChartAttrs</code> <p>The single chart attributes for the bar chart.</p> <code>BarDataPointAttrs</code> <p>The data point attributes for the bar chart.</p> <code>HistogramChartAttrs</code> <p>The histogram chart attributes.</p> <code>HistogramSingleChartAttrs</code> <p>The single chart attributes for the histogram chart.</p> <code>HistDataPointAttrs</code> <p>The data point attributes for the histogram chart.</p> <code>HeatmapChartAttrs</code> <p>The heatmap chart attributes.</p> <code>HeatmapSingleChartAttrs</code> <p>The single chart attributes for the heatmap chart.</p> <code>HeatmapColorbarAttrs</code> <p>The heatmap colorbar attributes.</p> <code>StyleAttrs</code> <p>The style typing.</p> <code>ColorGeneralStyleAttrs</code> <p>The typing for the general color style.</p> <code>FontStyleAttrs</code> <p>The typing for the font style.</p> <code>AxesStyleAttrs</code> <p>The typing for the axes style.</p> <code>LegendStyleAttrs</code> <p>The typing for the legend style.</p> <code>AreaStyleAttrs</code> <p>The typing for the area style.</p> <code>GridStyleAttrs</code> <p>The typing for the grid style.</p> <code>LineStyleAttrs</code> <p>The typing for the line style.</p> <code>BarStyleAttrs</code> <p>The typing for the bar style.</p> <code>HistStyleAttrs</code> <p>The typing for the histogram style.</p> <code>VLineStyleAttrs</code> <p>The typing for the vertical line style.</p> <code>HLineStyleAttrs</code> <p>The typing for the horizontal line style.</p> <code>HeatmapStyleAttrs</code> <p>The typing for the heatmap style.</p>"},{"location":"references/typings/#chart-typings","title":"Chart Typings","text":""},{"location":"references/typings/#common-chart-typings","title":"Common Chart Typings","text":""},{"location":"references/typings/#datachart.typings.ChartAttrs","title":"datachart.typings.ChartAttrs","text":"<pre><code>ChartAttrs = Union[\n    LineChartAttrs,\n    BarChartAttrs,\n    HistogramChartAttrs,\n    HeatmapChartAttrs,\n]\n</code></pre> <p>The union of all chart attributes.</p>"},{"location":"references/typings/#datachart.typings.ChartCommonAttrs","title":"datachart.typings.ChartCommonAttrs","text":"<p>               Bases: <code>TypedDict</code></p> <p>The chart attributes common to all chart types.</p> ATTRIBUTE DESCRIPTION <code>title</code> <p>The title of the charts.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>xlabel</code> <p>The xlabel of the charts.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>ylabel</code> <p>The ylabel of the charts.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>figsize</code> <p>The size of the figure.</p> <p> TYPE: <code>Union[FIG_SIZE, Tuple[float, float], None]</code> </p> <code>xmin</code> <p>Determine the minimum x-axis value.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>xmax</code> <p>Determine the maximum x-axis value.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>ymin</code> <p>Determine the minimum y-axis value.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>ymax</code> <p>Determine the maximum y-axis value.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>show_legend</code> <p>Whether or not to show the legend.</p> <p> TYPE: <code>Union[bool, None]</code> </p> <code>show_grid</code> <p>Determine which grid lines to show.</p> <p> TYPE: <code>Union[SHOW_GRID, str, None]</code> </p> <code>aspect_ratio</code> <p>The aspect ratio of the charts.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>subplots</code> <p>Whether or not to create a separate subplot for each chart.</p> <p> TYPE: <code>Union[bool, None]</code> </p> <code>max_cols</code> <p>The maximum number of columns in the subplots. Active only when <code>subplots</code> is <code>True</code>.</p> <p> TYPE: <code>Union[int, None]</code> </p> <code>sharex</code> <p>Whether or not to share the x-axis in the subplots. Active only when <code>subplots</code> is <code>True</code>.</p> <p> TYPE: <code>Union[bool, None]</code> </p> <code>sharey</code> <p>Whether or not to share the y-axis in the subplots. Active only when <code>subplots</code> is <code>True</code>.</p> <p> TYPE: <code>Union[bool, None]</code> </p>"},{"location":"references/typings/#datachart.typings.VLinePlotAttrs","title":"datachart.typings.VLinePlotAttrs","text":"<p>               Bases: <code>TypedDict</code></p> <p>The vertical line plot attributes.</p> ATTRIBUTE DESCRIPTION <code>x</code> <p>The x-axis position of the line.</p> <p> TYPE: <code>Union[int, float]</code> </p> <code>ymin</code> <p>The minimum y-axis position value.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>ymax</code> <p>The maximum y-axis position value.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>style</code> <p>The vertical line style attributes.</p> <p> TYPE: <code>Union[VLineStyleAttrs, None]</code> </p> <code>label</code> <p>The label of the vertical line.</p> <p> TYPE: <code>Union[str, None]</code> </p>"},{"location":"references/typings/#datachart.typings.HLinePlotAttrs","title":"datachart.typings.HLinePlotAttrs","text":"<p>               Bases: <code>TypedDict</code></p> <p>The horizontal line plot attributes.</p> ATTRIBUTE DESCRIPTION <code>y</code> <p>The x-axis position of the line.</p> <p> TYPE: <code>Union[int, float]</code> </p> <code>xmin</code> <p>The minimum y-axis position value.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>xmax</code> <p>The maximum y-axis position value.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>style</code> <p>The horizontal line style attributes.</p> <p> TYPE: <code>Union[HLineStyleAttrs, None]</code> </p> <code>label</code> <p>The label of the horizontal line.</p> <p> TYPE: <code>Union[str, None]</code> </p>"},{"location":"references/typings/#line-chart-typings","title":"Line Chart Typings","text":""},{"location":"references/typings/#datachart.typings.LineChartAttrs","title":"datachart.typings.LineChartAttrs","text":"<p>               Bases: <code>ChartCommonAttrs</code></p> <p>The line chart attributes.</p> ATTRIBUTE DESCRIPTION <code>charts</code> <p>The line chart definitions.</p> <p> TYPE: <code>Union[LineSingleChartAttrs, List[LineSingleChartAttrs]]</code> </p> <code>show_yerr</code> <p>Whether or not to show the y-axis errors.</p> <p> TYPE: <code>Union[bool, None]</code> </p> <code>show_area</code> <p>Whether or not to show the area under the lines.</p> <p> TYPE: <code>Union[bool, None]</code> </p> <code>scalex</code> <p>The scale of the x-axis.</p> <p> TYPE: <code>Union[SCALE, str, None]</code> </p> <code>scaley</code> <p>The scale of the y-axis.</p> <p> TYPE: <code>Union[SCALE, str, None]</code> </p>"},{"location":"references/typings/#datachart.typings.LineSingleChartAttrs","title":"datachart.typings.LineSingleChartAttrs","text":"<p>               Bases: <code>TypedDict</code></p> <p>The single chart attributes for the line chart.</p> ATTRIBUTE DESCRIPTION <code>data</code> <p>The list of data points defining the line chart.</p> <p> TYPE: <code>List[LineDataPointAttrs]</code> </p> <code>subtitle</code> <p>The subtitle of the line chart. Also used as the label in the legend.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>xlabel</code> <p>The xlabel of the line chart.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>ylabel</code> <p>The ylabel of the line chart.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>style</code> <p>The style of the line chart.</p> <p> TYPE: <code>Union[LineStyleAttrs, None]</code> </p> <code>xticks</code> <p>The xtick positions list.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>xticklabels</code> <p>The xtick labels.</p> <p> TYPE: <code>Union[List[str], None]</code> </p> <code>xtickrotate</code> <p>The xtick rotation value.</p> <p> TYPE: <code>Union[int, None]</code> </p> <code>yticks</code> <p>the ytick position list.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>yticklabels</code> <p>The ytick labels.</p> <p> TYPE: <code>Union[List[str], None]</code> </p> <code>ytickrotate</code> <p>The ytick rotation value.</p> <p> TYPE: <code>Union[int, None]</code> </p> <code>vlines</code> <p>The vertical lines to be plot.</p> <p> TYPE: <code>Union[VLinePlotAttrs, List[VLinePlotAttrs], None]</code> </p> <code>hlines</code> <p>The horizontal lines to be plot.</p> <p> TYPE: <code>Union[HLinePlotAttrs, List[HLinePlotAttrs], None]</code> </p> <code>x</code> <p>The key name in <code>data</code> that contains the x-axis value. Defaults to <code>\"x\"</code>.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>y</code> <p>The key name in <code>data</code> that contains the y-axis value. Defaults to <code>\"y\"</code>.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>yerr</code> <p>The key name in <code>data</code> that contains the y-axis error value. Defaults to <code>\"yerr\"</code>.</p> <p> TYPE: <code>Union[str, None]</code> </p>"},{"location":"references/typings/#datachart.typings.LineDataPointAttrs","title":"datachart.typings.LineDataPointAttrs","text":"<p>               Bases: <code>TypedDict</code></p> <p>The data point attributes for the line chart.</p> ATTRIBUTE DESCRIPTION <code>x</code> <p>The x-axis value.</p> <p> TYPE: <code>Union[int, float]</code> </p> <code>y</code> <p>The y-axis value.</p> <p> TYPE: <code>Union[int, float]</code> </p> <code>yerr</code> <p>The y-axis error value.</p> <p> TYPE: <code>Optional[Union[int, float]]</code> </p>"},{"location":"references/typings/#bar-chart-typings","title":"Bar Chart Typings","text":""},{"location":"references/typings/#datachart.typings.BarChartAttrs","title":"datachart.typings.BarChartAttrs","text":"<p>               Bases: <code>ChartCommonAttrs</code></p> <p>The bar chart attributes.</p> ATTRIBUTE DESCRIPTION <code>charts</code> <p>The bar chart definitions.</p> <p> TYPE: <code>Union[BarSingleChartAttrs, List[BarSingleChartAttrs]]</code> </p> <code>show_yerr</code> <p>Whether or not to show the y-axis errors.</p> <p> TYPE: <code>Union[bool, None]</code> </p> <code>orientation</code> <p>The orientation of the bar charts.</p> <p> TYPE: <code>Union[ORIENTATION, str, None]</code> </p> <code>scaley</code> <p>The scale of the y-axis.</p> <p> TYPE: <code>Union[SCALE, str, None]</code> </p>"},{"location":"references/typings/#datachart.typings.BarSingleChartAttrs","title":"datachart.typings.BarSingleChartAttrs","text":"<p>               Bases: <code>TypedDict</code></p> <p>The single chart attributes for the bar chart.</p> ATTRIBUTE DESCRIPTION <code>data</code> <p>The list of data points defining the bar chart.</p> <p> TYPE: <code>List[BarDataPointAttrs]</code> </p> <code>subtitle</code> <p>The subtitle of the bar chart. Also used as the label in the legend.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>xlabel</code> <p>The xlabel of the bar chart.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>ylabel</code> <p>The ylabel of the bar chart.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>style</code> <p>The style of the bar chart.</p> <p> TYPE: <code>Union[BarStyleAttrs, None]</code> </p> <code>xticks</code> <p>The xtick positions list.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>xticklabels</code> <p>The xtick labels.</p> <p> TYPE: <code>Union[List[str], None]</code> </p> <code>xtickrotate</code> <p>The xtick rotation value.</p> <p> TYPE: <code>Union[int, None]</code> </p> <code>yticks</code> <p>the ytick position list.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>yticklabels</code> <p>The ytick labels.</p> <p> TYPE: <code>Union[List[str], None]</code> </p> <code>ytickrotate</code> <p>The ytick rotation value.</p> <p> TYPE: <code>Union[int, None]</code> </p> <code>vlines</code> <p>The vertical lines to be plot.</p> <p> TYPE: <code>Union[VLinePlotAttrs, List[VLinePlotAttrs], None]</code> </p> <code>hlines</code> <p>The horizontal lines to be plot.</p> <p> TYPE: <code>Union[HLinePlotAttrs, List[HLinePlotAttrs], None]</code> </p> <code>label</code> <p>The key name in <code>data</code> that contains the label value. Defaults to <code>\"label\"</code>.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>y</code> <p>The key name in <code>data</code> that contains the y-axis value. Defaults to <code>\"y\"</code>.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>yerr</code> <p>The key name in <code>data</code> that contains the y-axis error value. Defaults to <code>\"yerr\"</code>.</p> <p> TYPE: <code>Union[str, None]</code> </p>"},{"location":"references/typings/#datachart.typings.BarDataPointAttrs","title":"datachart.typings.BarDataPointAttrs","text":"<p>               Bases: <code>TypedDict</code></p> <p>The data point attributes for the bar chart.</p> ATTRIBUTE DESCRIPTION <code>label</code> <p>The label.</p> <p> TYPE: <code>str</code> </p> <code>y</code> <p>The y-axis value.</p> <p> TYPE: <code>Union[int, float]</code> </p> <code>yerr</code> <p>The y-axis error value.</p> <p> TYPE: <code>Optional[Union[int, float]]</code> </p>"},{"location":"references/typings/#histogram-typings","title":"Histogram Typings","text":""},{"location":"references/typings/#datachart.typings.HistogramChartAttrs","title":"datachart.typings.HistogramChartAttrs","text":"<p>               Bases: <code>ChartCommonAttrs</code></p> <p>The histogram chart attributes.</p> ATTRIBUTE DESCRIPTION <code>charts</code> <p>The histogram chart definitions.</p> <p> TYPE: <code>Union[HistogramSingleChartAttrs, List[HistogramSingleChartAttrs]]</code> </p> <code>orientation</code> <p>The orientation of the histogram charts.</p> <p> TYPE: <code>Union[ORIENTATION, str, None]</code> </p> <code>num_bins</code> <p>The number of bins the data points are split in to create the histogram.</p> <p> TYPE: <code>Union[int, None]</code> </p> <code>show_density</code> <p>Whether or not to plot the density histogram.</p> <p> TYPE: <code>Union[bool, None]</code> </p> <code>show_cumulative</code> <p>Whether or not to plot the cumulative histogram.</p> <p> TYPE: <code>Union[bool, None]</code> </p> <code>scaley</code> <p>The scale of the y-axis.</p> <p> TYPE: <code>Union[SCALE, str, None]</code> </p>"},{"location":"references/typings/#datachart.typings.HistogramSingleChartAttrs","title":"datachart.typings.HistogramSingleChartAttrs","text":"<p>               Bases: <code>TypedDict</code></p> <p>The single chart attributes for the histogram chart.</p> ATTRIBUTE DESCRIPTION <code>data</code> <p>The list of data points defining the histogram chart.</p> <p> TYPE: <code>List[HistDataPointAttrs]</code> </p> <code>subtitle</code> <p>The subtitle of the histogram chart. Also used as the label in the legend.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>xlabel</code> <p>The xlabel of the histogram chart.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>ylabel</code> <p>The ylabel of the histogram chart.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>style</code> <p>The style of the histogram chart.</p> <p> TYPE: <code>Union[HistStyleAttrs, None]</code> </p> <code>xticks</code> <p>The xtick positions list.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>xticklabels</code> <p>The xtick labels.</p> <p> TYPE: <code>Union[List[str], None]</code> </p> <code>xtickrotate</code> <p>The xtick rotation value.</p> <p> TYPE: <code>Union[int, None]</code> </p> <code>yticks</code> <p>the ytick position list.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>yticklabels</code> <p>The ytick labels.</p> <p> TYPE: <code>Union[List[str], None]</code> </p> <code>ytickrotate</code> <p>The ytick rotation value.</p> <p> TYPE: <code>Union[int, None]</code> </p> <code>vlines</code> <p>The vertical lines to be plot.</p> <p> TYPE: <code>Union[VLinePlotAttrs, List[VLinePlotAttrs], None]</code> </p> <code>hlines</code> <p>The horizontal lines to be plot.</p> <p> TYPE: <code>Union[HLinePlotAttrs, List[HLinePlotAttrs], None]</code> </p> <code>x</code> <p>The key name in <code>data</code> that contains the x-axis value. Defaults to <code>\"x\"</code>.</p> <p> TYPE: <code>Union[str, None]</code> </p>"},{"location":"references/typings/#datachart.typings.HistDataPointAttrs","title":"datachart.typings.HistDataPointAttrs","text":"<p>               Bases: <code>TypedDict</code></p> <p>The data point attributes for the histogram chart.</p> ATTRIBUTE DESCRIPTION <code>x</code> <p>The x-axis value.</p> <p> TYPE: <code>Union[int, float]</code> </p>"},{"location":"references/typings/#heatmap-typings","title":"Heatmap Typings","text":""},{"location":"references/typings/#datachart.typings.HeatmapChartAttrs","title":"datachart.typings.HeatmapChartAttrs","text":"<p>               Bases: <code>ChartCommonAttrs</code></p> <p>The heatmap chart attributes.</p> ATTRIBUTE DESCRIPTION <code>charts</code> <p>The heatmap chart definitions.</p> <p> TYPE: <code>Union[HeatmapSingleChartAttrs, List[HeatmapSingleChartAttrs]]</code> </p> <code>show_colorbars</code> <p>Whether or not to plot the density histogram.</p> <p> TYPE: <code>Union[bool, None]</code> </p> <code>show_heatmap_values</code> <p>Whether or not to plot the heatmap values.</p> <p> TYPE: <code>Union[bool, None]</code> </p>"},{"location":"references/typings/#datachart.typings.HeatmapSingleChartAttrs","title":"datachart.typings.HeatmapSingleChartAttrs","text":"<p>               Bases: <code>TypedDict</code></p> <p>The single chart attributes for the heatmap chart.</p> ATTRIBUTE DESCRIPTION <code>data</code> <p>The list of data points defining the heatmap chart.</p> <p> TYPE: <code>List[List[Union[int, float, None]]]</code> </p> <code>subtitle</code> <p>The subtitle of the heatmap chart. Also used as the label in the legend.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>xlabel</code> <p>The xlabel of the heatmap chart.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>ylabel</code> <p>The ylabel of the heatmap chart.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>style</code> <p>The style of the heatmap chart.</p> <p> TYPE: <code>Union[HeatmapStyleAttrs, None]</code> </p> <code>norm</code> <p>The value normalization.</p> <p> TYPE: <code>Union[NORMALIZE, str, None]</code> </p> <code>vmin</code> <p>The minimum value to normalize the data points.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>vmax</code> <p>The maximum value to normalize the data points.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>xticks</code> <p>The xtick positions list.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>xticklabels</code> <p>The xtick labels.</p> <p> TYPE: <code>Union[List[str], None]</code> </p> <code>xtickrotate</code> <p>The xtick rotation value.</p> <p> TYPE: <code>Union[int, None]</code> </p> <code>yticks</code> <p>the ytick position list.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>yticklabels</code> <p>The ytick labels.</p> <p> TYPE: <code>Union[List[str], None]</code> </p> <code>ytickrotate</code> <p>The ytick rotation value.</p> <p> TYPE: <code>Union[int, None]</code> </p> <code>colorbar</code> <p>The heatmap colorbar attributes.</p> <p> TYPE: <code>Union[HeatmapColorbarAttrs, None]</code> </p>"},{"location":"references/typings/#datachart.typings.HeatmapColorbarAttrs","title":"datachart.typings.HeatmapColorbarAttrs","text":"<p>               Bases: <code>TypedDict</code></p> <p>The heatmap colorbar attributes.</p> ATTRIBUTE DESCRIPTION <code>orientation</code> <p>The orientation.</p> <p> TYPE: <code>Union[ORIENTATION, str, None]</code> </p>"},{"location":"references/typings/#style-typings","title":"Style Typings","text":""},{"location":"references/typings/#datachart.typings.StyleAttrs","title":"datachart.typings.StyleAttrs","text":"<p>               Bases: <code>ColorGeneralStyleAttrs</code>, <code>FontStyleAttrs</code>, <code>AxesStyleAttrs</code>, <code>LegendStyleAttrs</code>, <code>AreaStyleAttrs</code>, <code>GridStyleAttrs</code>, <code>LineStyleAttrs</code>, <code>BarStyleAttrs</code>, <code>HistStyleAttrs</code>, <code>VLineStyleAttrs</code>, <code>HLineStyleAttrs</code>, <code>HeatmapStyleAttrs</code></p> <p>The style attributes. Combines all style typings.</p>"},{"location":"references/typings/#datachart.typings.ColorGeneralStyleAttrs","title":"datachart.typings.ColorGeneralStyleAttrs","text":"<p>               Bases: <code>TypedDict</code></p> <p>The typing for the general color style.</p> ATTRIBUTE DESCRIPTION <code>color_general_singular</code> <p>The general color for the singular-typed charts.</p> <p> TYPE: <code>Union[COLORS, str, None]</code> </p> <code>color_general_multiple</code> <p>The general color for the multiple-typed charts.</p> <p> TYPE: <code>Union[COLORS, str, None]</code> </p>"},{"location":"references/typings/#datachart.typings.FontStyleAttrs","title":"datachart.typings.FontStyleAttrs","text":"<p>               Bases: <code>TypedDict</code></p> <p>The typing for the font style.</p> ATTRIBUTE DESCRIPTION <code>font_general_family</code> <p>The general font family.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>font_general_sansserif</code> <p>The general sans-serif font.</p> <p> TYPE: <code>Union[List[str], None]</code> </p> <code>font_general_color</code> <p>The general font color.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>font_general_size</code> <p>The general font size.</p> <p> TYPE: <code>Union[int, float, str, None]</code> </p> <code>font_general_style</code> <p>The general font style.</p> <p> TYPE: <code>Union[FONT_STYLE, str, None]</code> </p> <code>font_general_weight</code> <p>The general font weight.</p> <p> TYPE: <code>Union[FONT_WEIGHT, str, None]</code> </p> <code>font_title_size</code> <p>The title font size.</p> <p> TYPE: <code>Union[int, float, str, None]</code> </p> <code>font_title_color</code> <p>The title font color.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>font_title_style</code> <p>The title font style.</p> <p> TYPE: <code>Union[FONT_STYLE, str, None]</code> </p> <code>font_title_weight</code> <p>The title font weight.</p> <p> TYPE: <code>Union[FONT_WEIGHT, str, None]</code> </p> <code>font_subtitle_size</code> <p>The subtitle font size.</p> <p> TYPE: <code>Union[int, float, str, None]</code> </p> <code>font_subtitle_color</code> <p>The subtitle font color.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>font_subtitle_style</code> <p>The subtitle font style.</p> <p> TYPE: <code>Union[FONT_STYLE, None]</code> </p> <code>font_subtitle_weight</code> <p>The subtitle font weight.</p> <p> TYPE: <code>Union[FONT_WEIGHT, None]</code> </p> <code>font_xlabel_size</code> <p>The xlabel font size.</p> <p> TYPE: <code>Union[int, float, str, None]</code> </p> <code>font_xlabel_color</code> <p>The xlabel font color.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>font_xlabel_style</code> <p>The xlabel font style.</p> <p> TYPE: <code>Union[FONT_STYLE, str, None]</code> </p> <code>font_xlabel_weight</code> <p>The xlabel font weight.</p> <p> TYPE: <code>Union[FONT_WEIGHT, str, None]</code> </p> <code>font_ylabel_size</code> <p>The ylabel font size.</p> <p> TYPE: <code>Union[int, float, str, None]</code> </p> <code>font_ylabel_color</code> <p>The ylabel font color.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>font_ylabel_style</code> <p>The ylabel font style.</p> <p> TYPE: <code>Union[FONT_STYLE, str, None]</code> </p> <code>font_ylabel_weight</code> <p>The ylabel font weight.</p> <p> TYPE: <code>Union[FONT_WEIGHT, str, None]</code> </p>"},{"location":"references/typings/#datachart.typings.AxesStyleAttrs","title":"datachart.typings.AxesStyleAttrs","text":"<p>               Bases: <code>TypedDict</code></p> <p>The typing for the axes style.</p> ATTRIBUTE DESCRIPTION <code>axes_spines_top_visible</code> <p>Make the top plot spine visible.</p> <p> TYPE: <code>Union[bool, None]</code> </p> <code>axes_spines_right_visible</code> <p>Make the right plot spine visible.</p> <p> TYPE: <code>Union[bool, None]</code> </p> <code>axes_spines_bottom_visible</code> <p>Make the bottom plot spine visible.</p> <p> TYPE: <code>Union[bool, None]</code> </p> <code>axes_spines_left_visible</code> <p>Make the left plot spine visible.</p> <p> TYPE: <code>Union[bool, None]</code> </p> <code>axes_spines_width</code> <p>The width of the spines.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>axes_spines_zorder</code> <p>The zorder of the spines.</p> <p> TYPE: <code>Union[int, None]</code> </p> <code>axes_ticks_length</code> <p>The length of the ticks.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>axes_ticks_label_size</code> <p>The size of the tick labels.</p> <p> TYPE: <code>Union[int, float, None]</code> </p>"},{"location":"references/typings/#datachart.typings.LegendStyleAttrs","title":"datachart.typings.LegendStyleAttrs","text":"<p>               Bases: <code>TypedDict</code></p> <p>The typing for the legend style.</p> ATTRIBUTE DESCRIPTION <code>plot_legend_shadow</code> <p>Show the legends shadow.</p> <p> TYPE: <code>Union[bool, None]</code> </p> <code>plot_legend_frameon</code> <p>Show the legends frame.</p> <p> TYPE: <code>Union[bool, None]</code> </p> <code>plot_legend_alignment</code> <p>The legend alignment.</p> <p> TYPE: <code>Union[LEGEND_ALIGN, str, None]</code> </p> <code>plot_legend_font_size</code> <p>The font size within the legend.</p> <p> TYPE: <code>Union[int, float, str, None]</code> </p> <code>plot_legend_title_size</code> <p>The title size of the legend.</p> <p> TYPE: <code>Union[int, float, str, None]</code> </p> <code>plot_legend_label_color</code> <p>The label color of the legend.</p> <p> TYPE: <code>Union[str, None]</code> </p>"},{"location":"references/typings/#datachart.typings.AreaStyleAttrs","title":"datachart.typings.AreaStyleAttrs","text":"<p>               Bases: <code>TypedDict</code></p> <p>The typing for the area style.</p> ATTRIBUTE DESCRIPTION <code>plot_area_alpha</code> <p>The alpha value of the area.</p> <p> TYPE: <code>Union[float, None]</code> </p> <code>plot_area_color</code> <p>The color of the area.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>plot_area_linewidth</code> <p>The line width of the area.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>plot_area_hatch</code> <p>The hatch style of the area.</p> <p> TYPE: <code>Union[HATCH_STYLE, str, None]</code> </p> <code>plot_area_zorder</code> <p>The zorder of the area.</p> <p> TYPE: <code>Union[int, None]</code> </p>"},{"location":"references/typings/#datachart.typings.GridStyleAttrs","title":"datachart.typings.GridStyleAttrs","text":"<p>               Bases: <code>TypedDict</code></p> <p>The typing for the grid style.</p> ATTRIBUTE DESCRIPTION <code>plot_grid_alpha</code> <p>The alpha value of the grid.</p> <p> TYPE: <code>Union[float, None]</code> </p> <code>plot_grid_color</code> <p>The color of the grid.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>plot_grid_linewidth</code> <p>The line width of the grid.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>plot_grid_linestyle</code> <p>The line style of the grid.</p> <p> TYPE: <code>Union[LINE_STYLE, str, None]</code> </p> <code>plot_grid_zorder</code> <p>The zorder of the grid.</p> <p> TYPE: <code>Union[int, None]</code> </p>"},{"location":"references/typings/#datachart.typings.LineStyleAttrs","title":"datachart.typings.LineStyleAttrs","text":"<p>               Bases: <code>TypedDict</code></p> <p>The typing for the line chart style.</p> ATTRIBUTE DESCRIPTION <code>plot_line_color</code> <p>The line color.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>plot_line_alpha</code> <p>The alpha value of the line.</p> <p> TYPE: <code>Union[float, None]</code> </p> <code>plot_line_style</code> <p>The line style.</p> <p> TYPE: <code>Union[LINE_STYLE, str, None]</code> </p> <code>plot_line_marker</code> <p>The line marker.</p> <p> TYPE: <code>Union[LINE_MARKER, str, None]</code> </p> <code>plot_line_width</code> <p>The line width.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>plot_line_drawstyle</code> <p>The line draw style.</p> <p> TYPE: <code>Union[LINE_DRAW_STYLE, str, None]</code> </p> <code>plot_line_zorder</code> <p>The zorder of the line.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>plot_xticks_label_rotate</code> <p>The label rotation of the xticks in the line chart.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>plot_yticks_label_rotate</code> <p>The label rotation of the yticks in the line chart.</p> <p> TYPE: <code>Union[int, float, None]</code> </p>"},{"location":"references/typings/#datachart.typings.BarStyleAttrs","title":"datachart.typings.BarStyleAttrs","text":"<p>               Bases: <code>TypedDict</code></p> <p>The typing for the bar chart style.</p> ATTRIBUTE DESCRIPTION <code>plot_bar_color</code> <p>The bar color.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>plot_bar_alpha</code> <p>The alpha value of the bar.</p> <p> TYPE: <code>Union[float, None]</code> </p> <code>plot_bar_width</code> <p>The width of the bar.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>plot_bar_zorder</code> <p>The zorder of the bar.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>plot_bar_hatch</code> <p>The hatch style of the bar.</p> <p> TYPE: <code>Union[HATCH_STYLE, str, None]</code> </p> <code>plot_bar_edge_width</code> <p>The edge width of the bar.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>plot_bar_edge_color</code> <p>The edge color of the bar.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>plot_bar_error_color</code> <p>The color of the error line of the bar.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>plot_xticks_label_rotate</code> <p>The label rotation of the xticks in the bar chart.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>plot_yticks_label_rotate</code> <p>The label rotation of the yticks in the bar chart.</p> <p> TYPE: <code>Union[int, float, None]</code> </p>"},{"location":"references/typings/#datachart.typings.HistStyleAttrs","title":"datachart.typings.HistStyleAttrs","text":"<p>               Bases: <code>TypedDict</code></p> <p>The typing for the histogram chart style.</p> ATTRIBUTE DESCRIPTION <code>plot_hist_color</code> <p>The color of the histogram.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>plot_hist_alpha</code> <p>The alpha value of the histogram.</p> <p> TYPE: <code>Union[float, None]</code> </p> <code>plot_hist_zorder</code> <p>The zorder of the histogram.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>plot_hist_fill</code> <p>The fill of the histogram.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>plot_hist_hatch</code> <p>The hatch style in the histogram.</p> <p> TYPE: <code>Union[HATCH_STYLE, str, None]</code> </p> <code>plot_hist_type</code> <p>The type of the histogram.</p> <p> TYPE: <code>Union[HISTOGRAM_TYPE, str, None]</code> </p> <code>plot_hist_align</code> <p>The alignment of the histogram.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>plot_hist_edge_width</code> <p>The edge width of the histogram.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>plot_hist_edge_color</code> <p>The edge color of the histogram.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>plot_xticks_label_rotate</code> <p>The label rotation of the xticks in the histogram chart.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>plot_yticks_label_rotate</code> <p>The label rotation of the yticks in the histogram chart.</p> <p> TYPE: <code>Union[int, float, None]</code> </p>"},{"location":"references/typings/#datachart.typings.VLineStyleAttrs","title":"datachart.typings.VLineStyleAttrs","text":"<p>               Bases: <code>TypedDict</code></p> <p>The typing for the vertical line style.</p> ATTRIBUTE DESCRIPTION <code>plot_vline_color</code> <p>The color of the vertical line.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>plot_vline_style</code> <p>The style of the vertical line.</p> <p> TYPE: <code>Union[LINE_STYLE, str, None]</code> </p> <code>plot_vline_width</code> <p>The width of the vertical line.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>plot_vline_alpha</code> <p>The alpha value of the vertical line.</p> <p> TYPE: <code>Union[float, None]</code> </p>"},{"location":"references/typings/#datachart.typings.HLineStyleAttrs","title":"datachart.typings.HLineStyleAttrs","text":"<p>               Bases: <code>TypedDict</code></p> <p>The typing for the horizontal line style.</p> ATTRIBUTE DESCRIPTION <code>plot_hline_color</code> <p>The color of the horizontal line.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>plot_hline_style</code> <p>The style of the horizontal line.</p> <p> TYPE: <code>Union[LINE_STYLE, str, None]</code> </p> <code>plot_hline_width</code> <p>The width of the horizontal line.</p> <p> TYPE: <code>Union[int, float, None]</code> </p> <code>plot_hline_alpha</code> <p>The alpha value of the horizontal line.</p> <p> TYPE: <code>Union[float, None]</code> </p>"},{"location":"references/typings/#datachart.typings.HeatmapStyleAttrs","title":"datachart.typings.HeatmapStyleAttrs","text":"<p>               Bases: <code>TypedDict</code></p> <p>The typing for the heatmap chart style.</p> ATTRIBUTE DESCRIPTION <code>plot_heatmap_cmap</code> <p>The color map of the heatmap.</p> <p> TYPE: <code>Union[str, colors.LinearSegmentedColormap, None]</code> </p> <code>plot_heatmap_alpha</code> <p>The alpha value of the heatmap.</p> <p> TYPE: <code>Union[float, None]</code> </p> <code>plot_heatmap_font_size</code> <p>The font size of the heatmap.</p> <p> TYPE: <code>Union[int, float, str, None]</code> </p> <code>plot_heatmap_font_color</code> <p>The font color of the heatmap.</p> <p> TYPE: <code>Union[str, None]</code> </p> <code>plot_heatmap_font_style</code> <p>The font style of the heatmap.</p> <p> TYPE: <code>Union[FONT_STYLE, str, None]</code> </p> <code>plot_heatmap_font_weight</code> <p>The font weight of the heatmap.</p> <p> TYPE: <code>Union[FONT_WEIGHT, str, None]</code> </p>"},{"location":"references/utils/","title":"Utils Module","text":""},{"location":"references/utils/#datachart.utils","title":"datachart.utils","text":"<p>The module containing the <code>utils</code>.</p> <p>The <code>utils</code> module provides a set of utilities used in the package.</p> MODULE DESCRIPTION <code>stats</code> <p>The module containing the statistics functions.</p> FUNCTION DESCRIPTION <code>save_figure</code> <p>Saves the figure into a file using the provided format parameters.</p>"},{"location":"references/utils/#functions","title":"Functions","text":""},{"location":"references/utils/#datachart.utils.save_figure","title":"datachart.utils.save_figure","text":"<pre><code>save_figure(\n    figure: plt.Figure,\n    path: str,\n    dpi: int = 300,\n    format: FIG_FORMAT = None,\n    transparent: bool = False,\n) -&gt; None\n</code></pre> <p>Save the figure to a file.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # 1. create the figure\n&gt;&gt;&gt; from datachart.charts import LineChart\n&gt;&gt;&gt; figure = LineChart({...})\n</code></pre> <pre><code>&gt;&gt;&gt; # 2. save the figure\n&gt;&gt;&gt; from datachart.utils.figure import save_figure\n&gt;&gt;&gt; from datachart.constants import FIG_FORMAT\n&gt;&gt;&gt; path = \"/path/to/save/chart.png\"\n&gt;&gt;&gt; save_figure(figure, path, dpi=300, format=FIG_FORMAT.PNG, transparent=True)\n</code></pre> PARAMETER DESCRIPTION <code>figure</code> <p>The figure to save.</p> <p> TYPE: <code>plt.Figure</code> </p> <code>path</code> <p>The path where the figure is saved.</p> <p> TYPE: <code>str</code> </p> <code>dpi</code> <p>The DPI of the figure.</p> <p> TYPE: <code>int</code> DEFAULT: <code>300</code> </p> <code>format</code> <p>The format of the figure. If <code>None</code>, the format will be determined from the file extension.</p> <p> TYPE: <code>FIG_FORMAT</code> DEFAULT: <code>None</code> </p> <code>transparent</code> <p>Whether to make the background transparent.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"references/utils/stats/","title":"Stats Module","text":""},{"location":"references/utils/stats/#datachart.utils.stats","title":"datachart.utils.stats","text":"<p>The module containing the <code>stats</code> methods.</p> <p>The <code>stats</code> module provides methods for calculating statistics.</p> FUNCTION DESCRIPTION <code>count</code> <p>Counts the number of elements in the list.</p> <code>mean</code> <p>Calculatest the mean of the values.</p> <code>median</code> <p>Calculates the median of the values.</p> <code>stdev</code> <p>Calculates the standard deviation of the values.</p> <code>quantile</code> <p>Calculates the quantile of the values.</p> <code>minimum</code> <p>Gets the minimum of the values.</p> <code>maximum</code> <p>Gets the maximum of the values.</p>"},{"location":"references/utils/stats/#functions","title":"Functions","text":""},{"location":"references/utils/stats/#datachart.utils.stats.count","title":"datachart.utils.stats.count","text":"<pre><code>count(values: List[Union[int, float]]) -&gt; int\n</code></pre> <p>Counts the number of elements in a list.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.utils.stats import count\n&gt;&gt;&gt; count([1, 2, 3, 4, 5])\n5\n</code></pre> PARAMETER DESCRIPTION <code>values</code> <p>The list of values.</p> <p> TYPE: <code>List[Union[int, float]]</code> </p> RETURNS DESCRIPTION <code>int</code> <p>The number of elements in the list.</p>"},{"location":"references/utils/stats/#datachart.utils.stats.mean","title":"datachart.utils.stats.mean","text":"<pre><code>mean(values: List[Union[int, float]]) -&gt; float\n</code></pre> <p>Calculates the mean of the values.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.utils.stats import mean\n&gt;&gt;&gt; mean([1, 2, 3, 4, 5])\n3.0\n</code></pre> PARAMETER DESCRIPTION <code>values</code> <p>The list of values.</p> <p> TYPE: <code>List[Union[int, float]]</code> </p> RETURNS DESCRIPTION <code>float</code> <p>The mean of the values.</p>"},{"location":"references/utils/stats/#datachart.utils.stats.median","title":"datachart.utils.stats.median","text":"<pre><code>median(values: List[Union[int, float]]) -&gt; float\n</code></pre> <p>Calculates the median of the values.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.utils.stats import median\n&gt;&gt;&gt; median([1, 2, 3, 4, 5])\n3.0\n</code></pre> PARAMETER DESCRIPTION <code>values</code> <p>The list of values.</p> <p> TYPE: <code>List[Union[int, float]]</code> </p> RETURNS DESCRIPTION <code>float</code> <p>The median of the values.</p>"},{"location":"references/utils/stats/#datachart.utils.stats.stdev","title":"datachart.utils.stats.stdev","text":"<pre><code>stdev(values: List[Union[int, float]]) -&gt; float\n</code></pre> <p>Calculates the standard deviation of the values.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.utils.stats import stdev\n&gt;&gt;&gt; stdev([1, 2, 3, 4, 5])\n1.4142135623730951\n</code></pre> PARAMETER DESCRIPTION <code>values</code> <p>The list of values.</p> <p> TYPE: <code>List[Union[int, float]]</code> </p> RETURNS DESCRIPTION <code>float</code> <p>The standard deviation of the values.</p>"},{"location":"references/utils/stats/#datachart.utils.stats.quantile","title":"datachart.utils.stats.quantile","text":"<pre><code>quantile(\n    values: List[Union[int, float]], q: float\n) -&gt; float\n</code></pre> <p>Calculates the quantile of the values.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.utils.stats import quantile\n&gt;&gt;&gt; quantile([1, 2, 3, 4, 5], 25)\n2.0\n</code></pre> PARAMETER DESCRIPTION <code>values</code> <p>The list of values.</p> <p> TYPE: <code>List[Union[int, float]]</code> </p> <code>q</code> <p>The quantile to calculate.</p> <p> TYPE: <code>float</code> </p> RETURNS DESCRIPTION <code>float</code> <p>The quantile of the values.</p>"},{"location":"references/utils/stats/#datachart.utils.stats.minimum","title":"datachart.utils.stats.minimum","text":"<pre><code>minimum(values: List[Union[int, float]]) -&gt; float\n</code></pre> <p>Gets the minimum of the values.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.utils.stats import minimum\n&gt;&gt;&gt; minimum([1, 2, 3, 4, 5])\n1\n</code></pre> PARAMETER DESCRIPTION <code>values</code> <p>The list of values.</p> <p> TYPE: <code>List[Union[int, float]]</code> </p> RETURNS DESCRIPTION <code>float</code> <p>The minimum of the values.</p>"},{"location":"references/utils/stats/#datachart.utils.stats.maximum","title":"datachart.utils.stats.maximum","text":"<pre><code>maximum(values: List[Union[int, float]]) -&gt; float\n</code></pre> <p>Gets the maximum of the values.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from datachart.utils.stats import maximum\n&gt;&gt;&gt; maximum([1, 2, 3, 4, 5])\n5\n</code></pre> PARAMETER DESCRIPTION <code>values</code> <p>The list of values.</p> <p> TYPE: <code>List[Union[int, float]]</code> </p> RETURNS DESCRIPTION <code>float</code> <p>The maximum of the values.</p>"}]}